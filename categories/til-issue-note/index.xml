<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TIL &amp; Issue Note - Category - Riley&#39;s DevLog</title>
        <link>https://riley817.github.io/categories/til-issue-note/</link>
        <description>TIL &amp; Issue Note - Category - Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Sat, 18 Feb 2023 20:55:48 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/categories/til-issue-note/" rel="self" type="application/rss+xml" /><item>
    <title>[TIL &amp; Issue Note] 20230218</title>
    <link>https://riley817.github.io/20230218/</link>
    <pubDate>Sat, 18 Feb 2023 20:55:48 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230218/</guid>
    <description><![CDATA[Deterministic 방식 같은 인풋을 가지고 있으면 두 개의 상태state가 동일equal하다 (=sync가 맞는다.) 서로의 입력을 전송하는데에 시간이 걸린다. 얼마나 latency를 잘 극복하는지 desync가 일어나지 않게 만드는 것이 핵심이다. desync를 막기 위해 delay 와 rollback 방식을 활용한다. Delay 지연시간만큼 입력을 딜레이 시켜서 처리하면 싱크가 맞게 되는 원리 쉽고 단순하게 구현할 수 있다. 문제점
지연시간이 발생한다. 지연시간이 보통 100ms 가 넘어가면 플레이어가 이를 감지 할 수 있다. Rollback 지연시간만큼 다시 시간을 되돌리고 다시 앞감기를 한다.]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20230214</title>
    <link>https://riley817.github.io/20230215/</link>
    <pubDate>Tue, 14 Feb 2023 23:51:47 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230215/</guid>
    <description><![CDATA[ Tucker의 게임 네트워킹의 이해 - 2
Protocol 약속, 규약 Network Protocol : 통신 규약 컴퓨터간 통신을 하기 위해서는 약속이 필요하다. ]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20230214</title>
    <link>https://riley817.github.io/20230214/</link>
    <pubDate>Tue, 14 Feb 2023 00:12:09 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230214/</guid>
    <description><![CDATA[Tucker의 게임 네트워킹의 이해 - 1
네트워킹 데이터를 주고 받는 것 컴퓨터 내부에서 발생하는 데이터 교환도 네트워킹이라고 볼 수 있다. 흔히 네트워킹이라고 말하면 외부에 멀리 떨어져 있는 컴퓨터들끼리의 데이터 교환을 의미한다. 내부 네트워킹과 외부 네트워킹간 차이 외부 네트워킹의 경우 지연시간이 발생한다 (latency)
RTT(Round Trip Time, 패킷왕복시간) : 패킷이 목적지에 도달하고나서 해당 패킷에 대한 응답이 출발지로 다시 돌아오기까지의 시간 지연시간의 경우 물리적인 환경의 문제이므로 줄이기가 어렵다. 게임에서는 눈속임을 통한 지연시간을 해소 연결 안전성 (연결 불안정)]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20230126</title>
    <link>https://riley817.github.io/20230126/</link>
    <pubDate>Thu, 26 Jan 2023 23:33:57 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230126/</guid>
    <description><![CDATA[Issue flutter 환경을 설정하던 중 안드로이드 라이센스 관련 명령어 실행시 에러 UnsupportedClassVersionError while &lsquo;flutter doctor &ndash;android-licenses&rsquo; MacOS 사용 환경 MacOS Ventura (M1 Mac) Android Studio Electric Eel 에러 내용 1 2 3 4 Exception in thread &#34;main&#34; java.lang.UnsupportedClassVersionError: com/android/prefs/AndroidLocationsProvider has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0 해결 내용 Agree to Andorid License 1 2 3 1.]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20230211</title>
    <link>https://riley817.github.io/20230211/</link>
    <pubDate>Thu, 26 Jan 2023 23:33:57 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230211/</guid>
    <description><![CDATA[전통적인 게임의 서버 구조 P2P 서버에 참여하는 구성원들이 서버이자 클라이언트의 역할을 한다. 주로 격투게임, 소규모 FPS 게임 등 반응 속도가 빨라야하는 장르에서 많이 사용했다. 인원수에 따라 유지해야 하는 연결의 개수가 많아 진다. Host 방식 게임에 참가하는 참가자 중 제일 처음 방을 만드는 참가자의 클라이언트를 서버로 사용 나머지 참가자는 클라이언트로서의 역할을 한다. 게임의 검증, 결과 판정 등은 호스트 클라이언트가 담당한다. 호스트에게 모든 데이터가 집중되므로 호스트의 컴퓨터 성능이 좋아야 한다. 호스트의 서버가 연결을 종료할 경우 접속한 모든 클라이언트가 게임을 할 수 없다.]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 개발협업 가이드 핸드북 초안</title>
    <link>https://riley817.github.io/20220627/</link>
    <pubDate>Mon, 27 Jun 2022 23:22:43 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20220627/</guid>
    <description><![CDATA[개발 협업 가이드 우리 팀에서 내부 및 외부 공동 작업자가 개발 협업하기 위한 방법으로 애자일의 Scrum 방법론을 사용합니다. Scrum 관리를 위한 도구로는 GitLab의 이슈 시스템과 칸반보드 기능을 활용합니다. GitLab에 등록되는 이슈(Task)는 시스템 개발과 관련된 작업만 작성하도록 합니다. 프로젝트 계약 등 개발작업이 아닌 작업의 경우 Microsoft Planner의 칸반보드를 사용합니다.
PBTeam – Microsoft Planner 사용가이드
GitLab은 Git 원격 저장소 관리, CI/CD, 이슈 관리, 테스트 등 소프트웨어 개발과 운영의 전반적인 라이프사이클을 관리할 수 있는 통합 툴입니다.]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20220603</title>
    <link>https://riley817.github.io/20220603/</link>
    <pubDate>Fri, 03 Jun 2022 18:54:00 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20220603/</guid>
    <description><![CDATA[ ECMAscript 모듈 Scope 관련 문제
Functions not working when type=&quot;module&quot; or import ]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20220326</title>
    <link>https://riley817.github.io/20220326/</link>
    <pubDate>Sat, 26 Mar 2022 18:51:55 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20220326/</guid>
    <description><![CDATA[블록체인과 보안 및 개인정보 1. 블록체인과 보안 해커 해커의 주된 목표 가치있는 정보 탈취로 경제적 이익 추구 -&gt; 정보 자체에 대한 약탈 서비스 중단(Denial of Service)을 통한 시스템의 교란 해커의 공격을 막으려면? 정보 자체가 노출되는 것을 보호 서비스가 중단되지 않도록 보호 블록체인은 해커의 공격에 대해 안전할까? 블록체인은 모든 데이터를 브로드캐스팅을 통해 다른 노드와 공유 정보의 탈취 자체가 필요없을 정도로 정보가 노출됨. 정보 탈취로부터의 안정성은 가지고 있지 못함 암호화 자체가 안전을 보장하지 않음 암호화를 위한 기술적인 문제도 뒤따름 블록체인 보안 서비스 중단 공격이나 기록을 변경시키려는 시도로부터는 현존하는 가장 안전한 시스템 공격이나 기록 변경을 위해서는 모든 노드를 공격해야 함.]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20220324</title>
    <link>https://riley817.github.io/20220324/</link>
    <pubDate>Thu, 24 Mar 2022 23:29:35 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20220324/</guid>
    <description><![CDATA[블록체인 원리(7) - 채굴과 51% 공격 1. 채굴과 블록 생성 블록을 만드는 것 = 채굴 보상금 획득 하는것이 금 획득하는 것과 비슷 채굴 단어의 유래 - Nick Szabo 금이 가치를 갖는 것은 채굴이 어렵기 때문 어떤 문제가 매우 어렵다면 -&gt; 문제의 정답 자체가 어떤 가치를 가지지 않을까? 블록 만듦 -&gt; 해시 퍼즐 풀이 : 어려운 문제이기 때문에 정답 자체가 가치 보유 금을 캐려면 -&gt; 금광에서 채굴 : 힘든 작업이기 때문에 금이 가치 보유 해시 퍼즐 풀이 -&gt;(비유) 금광에서 채굴 채굴 == 블록을 만들다.]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20220321</title>
    <link>https://riley817.github.io/20220321/</link>
    <pubDate>Mon, 21 Mar 2022 23:07:39 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20220321/</guid>
    <description><![CDATA[블록체인 원리 - (5) 비가역성 블록체인 원리 (6) - 하드 포크와 소프트 포크 1. 하드 포크와 소프트 포크의 기본 개념 하드 포크와 소프트 포크 동일한 블록에서 노드가 다른 행동을 하는 이유 중앙화 서버 : 하나의 소프트웨어를 여러 사람이 접속 블록체인 : 각자의 소프트웨어 접속 -&gt; 모든 사람의 소프트웨어 버전이 다르기 때문에 발생 블록체인의 소프트웨어 변경 최신 소프트웨어 사용자 -&gt; 모든 변경이 반영된 상태로 사용 이전 소프트웨어 사용자 -&gt; 변경이 반영되지 않은 형태로 사용 하드포크, 소프트 포크 동일한 블록에 대해 서로 다른 규칙을 적용, 서로 다른 결론에 이르는 현상 규칙이 상충시 발생하는 두 가지 현상 과거에는 유효하던 규칙이 지금은 무효화 과거에는 무효하던 규칙이 지금은 유효화 -&gt; 결국 블록체인 데이터에 영향을 미치게 됨 2.]]></description>
</item>
</channel>
</rss>
