<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 - Category - 라일리의 개발 기록장</title>
        <link>https://riley817.github.io/categories/%EC%89%BD%EA%B3%A0-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%81%9D%EB%82%B4%EB%8A%94-go%EC%96%B8%EC%96%B4-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EC%B4%88-%EC%9E%85%EB%AC%B8-%EA%B3%BC%EC%A0%95/</link>
        <description>쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 - Category - 라일리의 개발 기록장</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Fri, 23 Apr 2021 16:44:26 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/categories/%EC%89%BD%EA%B3%A0-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%81%9D%EB%82%B4%EB%8A%94-go%EC%96%B8%EC%96%B4-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EC%B4%88-%EC%9E%85%EB%AC%B8-%EA%B3%BC%EC%A0%95/" rel="self" type="application/rss+xml" /><item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 12 : 패키지 고급</title>
    <link>https://riley817.github.io/easy-golang-section12/</link>
    <pubDate>Fri, 23 Apr 2021 16:44:26 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section12/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
12.1 사용자 패키지 제작 및 문서화 12.1.1 사용자 패키지 작성 및 문서화 go 에서 패키지는 폴더명(디렉토리명)으로 접근한다. → 그러므로 명확하게 지정해야 한다. 사용자 패키지를 문서화 할 때 main 패키지를 제외하고 package 문서에 등록된다. 기본적으로 GOROOT 의 패키지에서 검색 → 없으면 GOPATH 패키지를 검색한다. go install 명령어 : GOPATH/pkg 에 패키지 등록 godoc -http:=6060 으로 본인 패키지 메소드 및 주석을 확인 할 수 있다.]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 11 : Go 파일 입출력</title>
    <link>https://riley817.github.io/easy-golang-section11/</link>
    <pubDate>Fri, 23 Apr 2021 15:36:01 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section11/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
11.1 파일 입출력 11.1.1 os 패키지 - 파일 읽기, 쓰기 Go에서 파일을 읽고 쓰기 위해 Go 표준 패키지인 os 패키지를 사용할 수 있다.
os.Open() : 기존 파일 열기 os.Create() : 새 파일을 생성 os.Close() : 파일 리소스 닫기 파일 읽기 및 탐색 예제 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package main import ( &#34;fmt&#34; &#34;os&#34; ) // 에러 체크 방식 1 func errCheck1(e error) { if e !]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 10 : 에러 처리</title>
    <link>https://riley817.github.io/easy-golang-section10/</link>
    <pubDate>Fri, 23 Apr 2021 13:11:20 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section10/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
10.1 에러처리 10.1.1 Go 에러 소프트웨어의 품질 향상에 가장 중요한 것 → 유형코드 및 에러 정보 등을 남기는 것
Go 에서는 기본적으로 error 라는 인터페이스 타입을 갖고 있다. 개발자는 이 인터페이스를 구현하는 커스텀 에러 타입을 만들 수 있다. 1 2 3 type error interface { Error() string } 10.1.2 Go 에러처리 Go 함수의 경우 기본적으로 리턴 타입을 두개 갖고 있다.]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 9 : Go 병행처리</title>
    <link>https://riley817.github.io/easy-golang-section9/</link>
    <pubDate>Thu, 15 Apr 2021 22:39:29 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section9/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
9.1 고루틴 9.1.1 GoRoutine goroutine은 go 런타임이 관리하는 lightweight 논리적(가장적) Thread이다. 생성 방법이 매우 간단하고 리소스를 매우 적게 사용한다. → 수 많은 고루틴을 동시에 생성 및 실행이 가능 Java나 Python의 스레드는 MB단위인 반면에 GO KB 단위이다. 비동기적 asynchronously 함수 루틴을 실행 한다. 채널을 통해 루틴간 통신이 가능하다. 공유 메모리를 사용시에 정확한 동기화 코딩이 필요하다. 싱글 루틴에 비해 항상 빠르지는 않다.]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 8 : Go 객체지향</title>
    <link>https://riley817.github.io/easy-golang-section8/</link>
    <pubDate>Tue, 13 Apr 2021 10:11:29 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section8/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
8.1 인터페이스 8.1.1 인터페이스란 구조체가 필드들의 집합체라면 interface는 메서드들의 집합이다. 인터페이스는 타입이 구현해야 하는 메서드 원형 prototype 을 정의한다. → 추상화를 제공 디자인패턴 측면에서 client의 입장 → 인터페이스에 정의된 메소드의 동작을 보장하므로 정확한 class의 구현방법을 몰라도 된다. 클래스간의 결합도 감소 → 유지보수성 향상, 기능 추가 용이성, 독립적인 프로그래밍 가능 인터페이스를 구현하기 위해서는 해당 타입이 그 인터페이스 메서드들이 모두 구현되어야 한다.]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 7 : Go 함수</title>
    <link>https://riley817.github.io/easy-golang-section7/</link>
    <pubDate>Thu, 08 Apr 2021 20:19:20 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section7/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
7.1 함수 기초 7.1.1 함수 여러 문장을 묶어서 실행하는 코드 블럭 단위 func 키워드를 사용하여 정의한다. 타 언어와 달리 변환 값 return value 다수 가능 1 2 3 4 func 함수명(매개변수) (반환타입 or 반환 값 변수명) : 반환 값 존재 func 함수명() (반환타입 or 반환 값 변수명) : 매개변수 없음, 반환 값 존재 func 함수명(매개변수) : 매개변수 존재, 반환 값 없음 func 함수명() : 매개변수 없음, 반환값 없음 함수 사용 예제 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import ( &#34;fmt&#34; &#34;strconv&#34; ) // 함수 선언 위치는 어느 곳이 든 가능 func helloGoLang() { // 매개변수 X, 반환값 x fmt.]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 6 : 배열, 슬라이스, 맵</title>
    <link>https://riley817.github.io/easy-golang-section6/</link>
    <pubDate>Tue, 06 Apr 2021 22:10:48 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section6/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
6.1 배열 6.2.1 배열 배열은 용량, 길이가 항상 같다. cap() : 배열, 슬라이스 용량 len() : 배열, 슬라이스 길이 대부분은 슬라이스를 많이 사용한다. 배열과 슬라이스 차이점 배열 슬라이스 길이 고정여부 길이가 고정 되어 있다. 길이가 가변이다. 타입 여부 값 타입 참조 타입 전달 방식 값을 복사 전달 참조 값 전달 기타 전체 비교연산자 가능 전체 비교 연산자 사용 불가 배열 선언 예제 - 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var arr1 [5]int var arr2 [5]int = [5]int{1, 2, 3, 4, 5} var arr3 = [5]int{1, 2, 3, 4, 5} arr4 := [5]int{1, 2, 3, 4, 5} arr5 := [5]int{1, 2, 3} arr6 := [.]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 5 : Go 데이터 타입</title>
    <link>https://riley817.github.io/easy-golang-section5/</link>
    <pubDate>Mon, 22 Mar 2021 13:11:32 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section5/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
5.1 Bool boolean 타입 : 참, 거짓 조건부 논리 연산자와 주로 함께 사용한다. !, ||(or) &amp;&amp;(and) 암묵적인 형 변환은 불가능하다. 0, Nil → false 변환 불가능 예제 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var b1 bool = true var b2 bool = false b3 := true // b4 := 1 // Error!]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 4 : Go 패키지 기초</title>
    <link>https://riley817.github.io/easy-golang-section4/</link>
    <pubDate>Fri, 19 Mar 2021 17:45:09 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section4/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
4.1 Go 패키지 Go의 패키지는 코드 구조화(모듈화) 및 재사용 기능을 제공한다. 응집도, 결합도를 느슨하게 해야 유지보수가 쉽고 가독성이 좋아진다. 클린코드 Go는 패키지를 사용해서 작은 단위의 컴포넌트를 작성하고 이러한 작은 패키지를 결합해서 프로그램을 작성할 것을 권고하고 있다. 패키지이름 = 디렉토리 이름 같은 패키지 내 소스파일들은 디렉토리명을 패키지명으로 사용한다. 네이밍 규칙 : 소문자 private 대문자 public Go에서 main 패키지는 특별하게 인식된다 → 컴파일러에서는 프로그램의 시작점 start point로 인식한다.]]></description>
</item>
<item>
    <title>[쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정] Section 3 : Go 제어문 및 반복문</title>
    <link>https://riley817.github.io/easy-golang-section3/</link>
    <pubDate>Wed, 17 Mar 2021 09:10:29 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/easy-golang-section3/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
3.1 조건문 3.1.1 조건문 IF if 문은 반드시 Boolean 형으로 검사해야 한다. 다른 언어처럼 1, 0 으로 조건문을 사용할 수 없다 → 자동 형변환 불가 소괄호는 사용하지 않는다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func main() { var a int = 20 b := 20 if a &gt;= 15 { fmt.]]></description>
</item>
</channel>
</rss>
