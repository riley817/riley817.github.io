<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>🍞🥐🥖 라일리의 코드 부스러기 🍞🥐🥖</title>
        <link>https://riley817.github.io/</link>
        <description>Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Fri, 24 Nov 2023 21:39:17 &#43;0900</lastBuildDate>
            <atom:link href="https://riley817.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>데이터 분석을 위한 SQL 레시피 - 5장 사용자를 파악하기 위한 데이터 추출 (2)</title>
    <link>https://riley817.github.io/sql-recipe-5-2/</link>
    <pubDate>Fri, 24 Nov 2023 21:39:17 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/sql-recipe-5-2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/sql-recipe/sql-recipe-thumbnail.png" referrerpolicy="no-referrer">
            </div>🗄️ 데이터분석을 위한 SQL 레시피 책을 읽고 정리 / 요약 한 내용입니다.
시계열에 따른 사용자 전체의 상태 변화 찾기 사용자는 서비스 사용 시작일부터 시간이 지나면서 &lsquo;충성도 높은 사용자&rsquo;, &lsquo;사용을 중지&rsquo;, &lsquo;휴면&rsquo; 등으로 상태가 변화 사용자가 계속해서 사용(리피트) 사용자가 사용을 중단(탈퇴/휴면) 서비스 제공자는 사용자가 어느 정도에서 계속 사용하고 있는지 파악하고 목표와의 괴리를 어떻게 좁힐 것 인지 방안을 검토 휴면 사용자를 어떻게 다시 사용하게 만들지도 생각 완전 탈퇴의 경우 복귀는 어려우나 휴면 사용자는 메일 매거진/CM/광고 등을 활용하여 다시 사용하게 유도 샘플 데이터 SNS 사용자 마스터 테이블 SNS 액션 로그 테이블 사용자 마스터 테이블과 액션 로그 테이블 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 DROP TABLE IF EXISTS mst_users; CREATE TABLE mst_users( user_id varchar(255) , sex varchar(255) , birth_date varchar(255) , register_date varchar(255) , register_device varchar(255) , withdraw_date varchar(255) ); INSERT INTO mst_users VALUES (&#39;U001&#39;, &#39;M&#39;, &#39;1977-06-17&#39;, &#39;2016-10-01&#39;, &#39;pc&#39; , NULL ) , (&#39;U002&#39;, &#39;F&#39;, &#39;1953-06-12&#39;, &#39;2016-10-01&#39;, &#39;sp&#39; , &#39;2016-10-10&#39;) , (&#39;U003&#39;, &#39;M&#39;, &#39;1965-01-06&#39;, &#39;2016-10-01&#39;, &#39;pc&#39; , NULL ) , (&#39;U004&#39;, &#39;F&#39;, &#39;1954-05-21&#39;, &#39;2016-10-05&#39;, &#39;pc&#39; , NULL ) , (&#39;U005&#39;, &#39;M&#39;, &#39;1987-11-23&#39;, &#39;2016-10-05&#39;, &#39;sp&#39; , NULL ) , (&#39;U006&#39;, &#39;F&#39;, &#39;1950-01-21&#39;, &#39;2016-10-10&#39;, &#39;pc&#39; , &#39;2016-10-10&#39;) , (&#39;U007&#39;, &#39;F&#39;, &#39;1950-07-18&#39;, &#39;2016-10-10&#39;, &#39;app&#39;, NULL ) , (&#39;U008&#39;, &#39;F&#39;, &#39;2006-12-09&#39;, &#39;2016-10-10&#39;, &#39;sp&#39; , NULL ) , (&#39;U009&#39;, &#39;M&#39;, &#39;2004-10-23&#39;, &#39;2016-10-15&#39;, &#39;pc&#39; , NULL ) , (&#39;U010&#39;, &#39;F&#39;, &#39;1987-03-18&#39;, &#39;2016-10-16&#39;, &#39;pc&#39; , NULL ) , (&#39;U011&#39;, &#39;F&#39;, &#39;1993-10-21&#39;, &#39;2016-10-18&#39;, &#39;pc&#39; , NULL ) , (&#39;U012&#39;, &#39;M&#39;, &#39;1993-12-22&#39;, &#39;2016-10-18&#39;, &#39;app&#39;, NULL ) , (&#39;U013&#39;, &#39;M&#39;, &#39;1988-02-09&#39;, &#39;2016-10-20&#39;, &#39;app&#39;, NULL ) , (&#39;U014&#39;, &#39;F&#39;, &#39;1994-04-07&#39;, &#39;2016-10-25&#39;, &#39;sp&#39; , NULL ) , (&#39;U015&#39;, &#39;F&#39;, &#39;1994-03-01&#39;, &#39;2016-11-01&#39;, &#39;app&#39;, NULL ) , (&#39;U016&#39;, &#39;F&#39;, &#39;1991-09-02&#39;, &#39;2016-11-01&#39;, &#39;pc&#39; , NULL ) , (&#39;U017&#39;, &#39;F&#39;, &#39;1972-05-21&#39;, &#39;2016-11-01&#39;, &#39;app&#39;, NULL ) , (&#39;U018&#39;, &#39;M&#39;, &#39;2009-10-12&#39;, &#39;2016-11-01&#39;, &#39;app&#39;, NULL ) , (&#39;U019&#39;, &#39;M&#39;, &#39;1957-05-18&#39;, &#39;2016-11-01&#39;, &#39;pc&#39; , NULL ) , (&#39;U020&#39;, &#39;F&#39;, &#39;1954-04-17&#39;, &#39;2016-11-03&#39;, &#39;app&#39;, NULL ) , (&#39;U021&#39;, &#39;M&#39;, &#39;2002-08-14&#39;, &#39;2016-11-03&#39;, &#39;sp&#39; , NULL ) , (&#39;U022&#39;, &#39;M&#39;, &#39;1979-12-09&#39;, &#39;2016-11-03&#39;, &#39;app&#39;, NULL ) , (&#39;U023&#39;, &#39;M&#39;, &#39;1992-01-12&#39;, &#39;2016-11-04&#39;, &#39;sp&#39; , NULL ) , (&#39;U024&#39;, &#39;F&#39;, &#39;1962-10-16&#39;, &#39;2016-11-05&#39;, &#39;app&#39;, NULL ) , (&#39;U025&#39;, &#39;F&#39;, &#39;1958-06-26&#39;, &#39;2016-11-05&#39;, &#39;app&#39;, NULL ) , (&#39;U026&#39;, &#39;M&#39;, &#39;1969-02-21&#39;, &#39;2016-11-10&#39;, &#39;sp&#39; , NULL ) , (&#39;U027&#39;, &#39;F&#39;, &#39;2001-07-10&#39;, &#39;2016-11-10&#39;, &#39;pc&#39; , NULL ) , (&#39;U028&#39;, &#39;M&#39;, &#39;1976-05-26&#39;, &#39;2016-11-15&#39;, &#39;app&#39;, NULL ) , (&#39;U029&#39;, &#39;M&#39;, &#39;1964-04-06&#39;, &#39;2016-11-28&#39;, &#39;pc&#39; , NULL ) , (&#39;U030&#39;, &#39;M&#39;, &#39;1959-10-07&#39;, &#39;2016-11-28&#39;, &#39;sp&#39; , NULL ) ; 12.]]></description>
</item>
<item>
    <title>데이터 분석을 위한 SQL 레시피 - 5장 사용자를 파악하기 위한 데이터 추출 (1)</title>
    <link>https://riley817.github.io/sql-recipe-5-1/</link>
    <pubDate>Fri, 24 Nov 2023 16:40:17 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/sql-recipe-5-1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/sql-recipe/sql-recipe-thumbnail.png" referrerpolicy="no-referrer">
            </div>🗄️ 데이터분석을 위한 SQL 레시피 책을 읽고 정리 / 요약 한 내용입니다.
11. 사용자 전체의 특징과 경향 찾기 서비스를 제공하는 것은 사용자에게 가치를 제공하는 것
서비스 제공자 측에서 관련 정보로 알고 싶은 것
사용자의 속성(나이, 성별, 주소지) 사용자의 행동(구매한 상품, 사용한 기능, 사용한 빈도) 샘플 데이터 사용자 마스터 테이블 가입시 사용자 성별, 가입 날짜, 사용 장치 등 탈퇴시는 날짜만 기록 액션 로그 테이블 페이지 열람, 관심 상품 등록, 카트 추가, 구매, 리뷰 등 각 액션에 이름을 명시 user_id가 NULL 인 경우 비로그인 회원 액션 로그 테이블을 따로 만들고 액션 내용을 적어두면 별도의 JOIN, UNION 없이 데이터를 다룰 수 있음 사용자 마스터 테이블과 액션 로그 테이블 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 -- 사용자 마스터 정보 DROP TABLE IF EXISTS mst_users; CREATE TABLE mst_users( user_id varchar(255) , sex varchar(255) , birth_date varchar(255) , register_date varchar(255) , register_device varchar(255) , withdraw_date varchar(255) ); INSERT INTO mst_users VALUES (&#39;U001&#39;, &#39;M&#39;, &#39;1977-06-17&#39;, &#39;2016-10-01&#39;, &#39;pc&#39; , NULL ) , (&#39;U002&#39;, &#39;F&#39;, &#39;1953-06-12&#39;, &#39;2016-10-01&#39;, &#39;sp&#39; , &#39;2016-10-10&#39;) , (&#39;U003&#39;, &#39;M&#39;, &#39;1965-01-06&#39;, &#39;2016-10-01&#39;, &#39;pc&#39; , NULL ) , (&#39;U004&#39;, &#39;F&#39;, &#39;1954-05-21&#39;, &#39;2016-10-05&#39;, &#39;pc&#39; , NULL ) , (&#39;U005&#39;, &#39;M&#39;, &#39;1987-11-23&#39;, &#39;2016-10-05&#39;, &#39;sp&#39; , NULL ) , (&#39;U006&#39;, &#39;F&#39;, &#39;1950-01-21&#39;, &#39;2016-10-10&#39;, &#39;pc&#39; , &#39;2016-10-10&#39;) , (&#39;U007&#39;, &#39;F&#39;, &#39;1950-07-18&#39;, &#39;2016-10-10&#39;, &#39;app&#39;, NULL ) , (&#39;U008&#39;, &#39;F&#39;, &#39;2006-12-09&#39;, &#39;2016-10-10&#39;, &#39;sp&#39; , NULL ) , (&#39;U009&#39;, &#39;M&#39;, &#39;2004-10-23&#39;, &#39;2016-10-15&#39;, &#39;pc&#39; , NULL ) , (&#39;U010&#39;, &#39;F&#39;, &#39;1987-03-18&#39;, &#39;2016-10-16&#39;, &#39;pc&#39; , NULL ) ; -- 액션 로그 DROP TABLE IF EXISTS action_log; CREATE TABLE action_log( session varchar(255) , user_id varchar(255) , action varchar(255) , category varchar(255) , products varchar(255) , amount integer , stamp varchar(255) ); INSERT INTO action_log VALUES (&#39;989004ea&#39;, &#39;U001&#39;, &#39;purchase&#39;, &#39;drama&#39; , &#39;D001,D002&#39;, 2000, &#39;2016-11-03 18:10:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;view&#39; , NULL , NULL , NULL, &#39;2016-11-03 18:00:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;favorite&#39;, &#39;drama&#39; , &#39;D001&#39; , NULL, &#39;2016-11-03 18:00:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;review&#39; , &#39;drama&#39; , &#39;D001&#39; , NULL, &#39;2016-11-03 18:00:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D001&#39; , NULL, &#39;2016-11-03 18:00:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D001&#39; , NULL, &#39;2016-11-03 18:00:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D001&#39; , NULL, &#39;2016-11-03 18:00:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D001&#39; , NULL, &#39;2016-11-03 18:00:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D001&#39; , NULL, &#39;2016-11-03 18:00:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D002&#39; , NULL, &#39;2016-11-03 18:01:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D001,D002&#39;, NULL, &#39;2016-11-03 18:02:00&#39;) , (&#39;989004ea&#39;, &#39;U001&#39;, &#39;purchase&#39;, &#39;drama&#39; , &#39;D001,D002&#39;, 2000, &#39;2016-11-03 18:10:00&#39;) , (&#39;47db0370&#39;, &#39;U002&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D001&#39; , NULL, &#39;2016-11-03 19:00:00&#39;) , (&#39;47db0370&#39;, &#39;U002&#39;, &#39;purchase&#39;, &#39;drama&#39; , &#39;D001&#39; , 1000, &#39;2016-11-03 20:00:00&#39;) , (&#39;47db0370&#39;, &#39;U002&#39;, &#39;add_cart&#39;, &#39;drama&#39; , &#39;D002&#39; , NULL, &#39;2016-11-03 20:30:00&#39;) , (&#39;87b5725f&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;action&#39;, &#39;A004&#39; , NULL, &#39;2016-11-04 12:00:00&#39;) , (&#39;87b5725f&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;action&#39;, &#39;A005&#39; , NULL, &#39;2016-11-04 12:00:00&#39;) , (&#39;87b5725f&#39;, &#39;U001&#39;, &#39;add_cart&#39;, &#39;action&#39;, &#39;A006&#39; , NULL, &#39;2016-11-04 12:00:00&#39;) , (&#39;9afaf87c&#39;, &#39;U002&#39;, &#39;purchase&#39;, &#39;drama&#39; , &#39;D002&#39; , 1000, &#39;2016-11-04 13:00:00&#39;) , (&#39;9afaf87c&#39;, &#39;U001&#39;, &#39;purchase&#39;, &#39;action&#39;, &#39;A005,A006&#39;, 1000, &#39;2016-11-04 15:00:00&#39;) ; 11.]]></description>
</item>
<item>
    <title>구글 빅쿼리(BigQuery) 시작하기 및 DataGrip 연동</title>
    <link>https://riley817.github.io/bigquery-datagrip/</link>
    <pubDate>Fri, 24 Nov 2023 11:40:17 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/bigquery-datagrip/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/dbms/bigquery-datagrip/google-bigquery-logo.png" referrerpolicy="no-referrer">
            </div>구글 계정 생성 기본 90일 동안 $300 크레딧으로 무료 평가판을 사용할 수 있다. 무료 체험 기간이 지나면 무료 체험 중 생성한 리소스는 모두 중지 되며 유료 계정으로 업그레이드 하지 않으면 요금이 부과되지 않는다. 새 프로젝트 버튼을 클릭하여 프로젝트 생성하기 데이터 세트 생성하기 데이터 세트는 테이블과 뷰에 대한 액세스를 구성 및 제어하는 최상위 컨테이너이다. 테이블이나 뷰는 반드시 데이터 세트에 속해야 하므로 최소 한 개 이상의 데이터 세트를 구성해야 한다.
Google Cloud Platform 콘솔 메뉴에서 BigQuery 메뉴를 선택]]></description>
</item>
<item>
    <title>데이터 분석을 위한 SQL 레시피 - 4장 시계열 기반으로 데이터 집계하기 (2)</title>
    <link>https://riley817.github.io/sql-recipe-4-2/</link>
    <pubDate>Wed, 22 Nov 2023 20:24:17 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/sql-recipe-4-2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/sql-recipe/sql-recipe-thumbnail.png" referrerpolicy="no-referrer">
            </div>🗄️ 데이터분석을 위한 SQL 레시피 책을 읽고 정리 / 요약 한 내용입니다.
10. 다면적인 축을 사용해 데이터 집약하기 매출의 시계열뿐만 아니라 상품의 카테고리, 가격 등을 조합하여 데이터의 특징을 추출해 리포팅 샘플 데이터 매출 데이터 로그 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 DROP TABLE IF EXISTS purchase_detail_log; CREATE TABLE purchase_detail_log( dt varchar(255) , order_id integer , user_id varchar(255) , item_id varchar(255) , price integer , category varchar(255) , sub_category varchar(255) ); INSERT INTO purchase_detail_log VALUES (&#39;2017-01-18&#39;, 48291, &#39;usr33395&#39;, &#39;lad533&#39;, 37300, &#39;ladys_fashion&#39;, &#39;bag&#39;) , (&#39;2017-01-18&#39;, 48291, &#39;usr33395&#39;, &#39;lad329&#39;, 97300, &#39;ladys_fashion&#39;, &#39;jacket&#39;) , (&#39;2017-01-18&#39;, 48291, &#39;usr33395&#39;, &#39;lad102&#39;, 114600, &#39;ladys_fashion&#39;, &#39;jacket&#39;) , (&#39;2017-01-18&#39;, 48291, &#39;usr33395&#39;, &#39;lad886&#39;, 33300, &#39;ladys_fashion&#39;, &#39;bag&#39;) , (&#39;2017-01-18&#39;, 48292, &#39;usr52832&#39;, &#39;dvd871&#39;, 32800, &#39;dvd&#39; , &#39;documentary&#39;) , (&#39;2017-01-18&#39;, 48292, &#39;usr52832&#39;, &#39;gam167&#39;, 26000, &#39;game&#39; , &#39;accessories&#39;) , (&#39;2017-01-18&#39;, 48292, &#39;usr52832&#39;, &#39;lad289&#39;, 57300, &#39;ladys_fashion&#39;, &#39;bag&#39;) , (&#39;2017-01-18&#39;, 48293, &#39;usr28891&#39;, &#39;out977&#39;, 28600, &#39;outdoor&#39; , &#39;camp&#39;) , (&#39;2017-01-18&#39;, 48293, &#39;usr28891&#39;, &#39;boo256&#39;, 22500, &#39;book&#39; , &#39;business&#39;) , (&#39;2017-01-18&#39;, 48293, &#39;usr28891&#39;, &#39;lad125&#39;, 61500, &#39;ladys_fashion&#39;, &#39;jacket&#39;) , (&#39;2017-01-18&#39;, 48294, &#39;usr33604&#39;, &#39;mem233&#39;, 116300, &#39;mens_fashion&#39; , &#39;jacket&#39;) , (&#39;2017-01-18&#39;, 48294, &#39;usr33604&#39;, &#39;cd477&#39; , 25800, &#39;cd&#39; , &#39;classic&#39;) , (&#39;2017-01-18&#39;, 48294, &#39;usr33604&#39;, &#39;boo468&#39;, 31000, &#39;book&#39; , &#39;business&#39;) , (&#39;2017-01-18&#39;, 48294, &#39;usr33604&#39;, &#39;foo402&#39;, 48700, &#39;food&#39; , &#39;meats&#39;) , (&#39;2017-01-18&#39;, 48295, &#39;usr38013&#39;, &#39;foo134&#39;, 32000, &#39;food&#39; , &#39;fish&#39;) , (&#39;2017-01-18&#39;, 48295, &#39;usr38013&#39;, &#39;lad147&#39;, 96100, &#39;ladys_fashion&#39;, &#39;jacket&#39;) ; 10.]]></description>
</item>
<item>
    <title>데이터 분석을 위한 SQL 레시피 - 4장 시계열 기반으로 데이터 집계하기 (1)</title>
    <link>https://riley817.github.io/sql-recipe-4-1/</link>
    <pubDate>Wed, 22 Nov 2023 19:27:17 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/sql-recipe-4-1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/sql-recipe/sql-recipe-thumbnail.png" referrerpolicy="no-referrer">
            </div>🗄️ 데이터분석을 위한 SQL 레시피 책을 읽고 정리 / 요약 한 내용입니다.
매출 데이터를 시계열로 집계 하기 매출 데이터를 시계열로 집계하면 규칙성을 찾거나, 어떤 기간과 비교했을 때 변화폭을 확인 할 수 있다. 9. 시계열 기반으로 데이터 집계하기 매출 데이터 로그 dt order_id user_id purchase_amount 2014-01-01 1 rhwpvvitou 13900 2014-01-01 2 hqnwoamzic 10616 2014-01-02 3 tzlmqryunr 21156 2014-01-02 4 wkmqqwbyai 14893 2014-01-03 5 ciecbedwbq 13054 2014-01-03 6 svgnbqsagx 24384 2014-01-03 7 dfgqftdocu 15591 2014-01-04 8 sbgqlzkvyn 3025 2014-01-04 9 lbedmngbol 24215 2014-01-04 10 itlvssbsgx 2059 2014-01-05 11 jqcmmguhik 4235 2014-01-05 12 jgotcrfeyn 28013 2014-01-05 13 pgeojzoshx 16008 2014-01-06 14 msjberhxnx 1980 2014-01-06 15 tlhbolohte 23494 2014-01-06 16 gbchhkcotf 3966 2014-01-07 17 zfmbpvpzvu 28159 2014-01-07 18 yauwzpaxtx 8715 2014-01-07 19 uyqboqfgex 10805 2014-01-08 20 hiqdkrzcpq 3462 2014-01-08 21 zosbvlylpv 13999 2014-01-08 22 bwfbchzgnl 2299 2014-01-09 23 zzgauelgrt 16475 2014-01-09 24 qrzfcwecge 6469 2014-01-10 25 njbpsrvvcq 16584 2014-01-10 26 cyxfgumkst 11339 9.]]></description>
</item>
<item>
    <title>데이터 분석을 위한 SQL 레시피 - 3장 데이터 가공을 위한 SQL</title>
    <link>https://riley817.github.io/sql-recipe-3/</link>
    <pubDate>Tue, 21 Nov 2023 20:39:26 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/sql-recipe-3/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/sql-recipe/sql-recipe-thumbnail.png" referrerpolicy="no-referrer">
            </div>🗄️ 데이터분석을 위한 SQL 레시피 책을 읽고 정리 / 요약 한 내용입니다.
데이터를 가공해야 하는 이유 다룰 데이터가 데이터 분석 용도로 상정되지 않은 경우 연산할 때 비교 가능한 상태를 만들고 오류를 회피하기 위한 경우 5. 하나의 값 조작하기 5.1 코드 값을 레이블로 변경하기 디폴트 값을 지정할 경우 ELSE 구문을 사용한다.
1 2 3 4 5 6 7 8 9 SELECT user_id , CASE WHEN register_device = 1 THEN &#39;데스크톱&#39; WHEN register_device = 2 THEN &#39;스마트폰&#39; WHEN register_device = 3 THEN &#39;애플리케이션&#39; ELSE &#39;&#39; END as device_name FROM mst_users; 5.]]></description>
</item>
<item>
    <title>데이터 분석을 위한 SQL 레시피 - 2장 도구와 데이터</title>
    <link>https://riley817.github.io/sql-recipe-2/</link>
    <pubDate>Mon, 20 Nov 2023 17:39:26 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/sql-recipe-2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/sql-recipe/sql-recipe-thumbnail.png" referrerpolicy="no-referrer">
            </div>🗄️ 데이터분석을 위한 SQL 레시피 책을 읽고 정리 / 요약 한 내용입니다.
개요 대표적인 빅데이터 처리 시스템을 설명하고 다루는 데이터의 양, 처리 내용, 비용 제약등을 생각하여 어떤 도구를 사용할지 알아보자 소개되는 시스템은 기본적으로 SQL 인터페이스를 가지고 있고 어떤 도구를 선택하더라도 다른 도구로 쉽게 마이그레이션이 가능 빅데이터 처리 시스템 1. PostgreSQL 오픈 소스 RDB(Relational Database)로 다양한 플랫폼 지원 및 GUI 인스톨러 제공 다른 오픈 소스 RDB와 비교시 표준 SQL을 잘 준수하며 윈도 함수, CTE(WITH 구문) 등 분석에 필수적으로 사용하는 구문 모두 구현 가능 많은 확장 기능을 제공하여 편리하게 사용 가능 2.]]></description>
</item>
<item>
    <title>데이터 분석을 위한 SQL 레시피 - 1장 빅데이터 시대에 요구되는 분석력이란</title>
    <link>https://riley817.github.io/sql-recipe-1/</link>
    <pubDate>Mon, 20 Nov 2023 15:39:26 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/sql-recipe-1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/sql-recipe/sql-recipe-thumbnail.png" referrerpolicy="no-referrer">
            </div>🗄️ 데이터분석을 위한 SQL 레시피 책을 읽고 정리 / 요약 한 내용입니다.
1. 빅데이터 빅데이터의 위키피디아 정의 빅데이터big data는 상용 데이터베이스 관리 도구와 기존의 데이터 처리 애플리케이션으로 처리하는 것이 힘들 정도로 거대하고 복잡한 데이터의 집합을 나타내는 용어 기술적인 과제로 수집, 선택, 저장, 검색, 공유, 전송, 분석 시각화 등 대규모 데이터 집합의 경향을 파악하려면 비즈니스 경향 발견, 연구 품질 결정, 질병 예방, 법적 인용 링크, 범죄 방지, 실시간 도록 교통 상황 판단 등의 상관관계를 알 수 있음 데이터 수집, 집계, 시각화를 통해 다양한 분야에 활용하기 위한 것 빅데이터가 주목받게 된 기술적 이유들 기억 용량의 대용량화 하드웨어 가격의 하락과 클라우드 기술의 등장 분산 처리를 담당하는 미들웨어 등장 빅데이터 미들웨어 Apache Hadoop, Amazon Redshift, Goolge BigQuery 등 기존에 사용하던 웹 접근 로그, 회사 내부 데이터, 기타 도구를 활용해 얻은 데이터를 모두 한번에 관리 할 수 있음 빅데이터 사용 용도 개별적인 사용자의 행동 파악 사용자의 흥미와 기호를 기반으로 하는 추천 광고 타켓팅 예측 모델링 기계 학습 단순히 웹 접근을 분석하는 영역을 넘어 데이터를 활용해 돈을 버는 기업의 수가 늘기 시작함 2.]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [15장] 구글 드라이브 설계</title>
    <link>https://riley817.github.io/chapter15/</link>
    <pubDate>Sun, 03 Sep 2023 01:02:15 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter15/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/system-design-interview/system-design-thumbnail.png" referrerpolicy="no-referrer">
            </div>Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의하고 싶은 주제 같이 스터디를 함으로써 책을 빠른시간내에 읽고 정리해볼 수 있어서 좋았습니다. ( 그 과정은 조금 힘들지만 그래도 다 읽어서 좋습니다!) 저장소 공간을 절약할 때 자주 바뀌는 파일로 인해 버전 이력이 많이 생긴다면 중요한 버전만 어떻게 골라낼 수 있을까? 1. 문제 이해 및 설계 범위 확정 1.1 기능적 요구사항 파일추가. 가장 쉬운 방법은 drag-and-drop 파일 다운로드 여러 단말에 파일 동기화 파일 갱신 이력 조회(revision history) 파일 공유 파일이 편집되거나 삭제되거나 새롭게 공유되었을 때 알림푯; 제외기능 : 구글문서 편집 및 협업 기능 1.]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [14장] 유튜브 설계</title>
    <link>https://riley817.github.io/chapter14/</link>
    <pubDate>Sat, 02 Sep 2023 23:14:34 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter14/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/system-design-interview/system-design-thumbnail.png" referrerpolicy="no-referrer">
            </div>Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의하고 싶은 주제 느낀점
모바일 인터넷 트래픽 중 37% 가 유튜브라는 사실이 놀랍습니다. 비디오를 트랜스코딩 시 DAG 모델이 어떻게 쓰이는지 와닿지 않아서 조금 이해가 가지 않았습니다. 객체지향 언어에서처럼 각 작업을 인터페이스나 추상메서드로 정의해두면 클라이언트는 해당 작업을 클라이언트 OS에 맞게 구현하는 것 이라고 이해했는데 맞을까요? 1. 문제 이해 및 설계 범위 확정 요구사항 빠른 비디오 업로드 원활한 비디오 재생 재생 품질 선택 낮은 인프라 비용 높은 가용성과 규모 확장성 그리고 안정성 지원 클라이언트 : 모바일 앱, 웹브라우저, 스마트TV 개략적 규모 측정 일간 능동사용자 : 5백만 한 사용자는 하루 평균 5개의 비디오 시청 10%의 사용자가 하루에 1 비디오 업로드 비디오 평균 크기 300MB 비디오 저장을 위해 매일 요구되는 용량 : 5백만 * 10% * 300MB = 150TB CDN 비용 클라우드 CDN을 통해 서비스할 경우 데이터의 양에 따라 CDN에서 과금 아마존 클라우드프론트 기준으로 100% 미국에서 발생 시 1GB 당 0.]]></description>
</item>
</channel>
</rss>
