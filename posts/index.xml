<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Riley&#39;s DevLog</title>
        <link>https://riley817.github.io/posts/</link>
        <description>All Posts | Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Sat, 12 Aug 2023 14:32:30 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [3장] 시스템 설계 면접 공략법</title>
    <link>https://riley817.github.io/chapter3/</link>
    <pubDate>Sat, 12 Aug 2023 14:32:30 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter3/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의하고 싶은 주제 면접관이 되었을 때 주로 어떤 질문들을 하시나요? 혹은 받아본 질문 중 기억에 남는 질문 면접자가 되었을 때 어떤 질문을 해야 어필을 할 수 있나요? 요약 해당 장은 면접 뿐만아니라 평소 시스템 설계를 할 때 중요한 사항들인 것 같다.
문제 이해 및 설계 범위 확정 요구사항을 완전히 이해하지 않고 답을 내놓는 행위는 좋지 않다. -&gt; 깊이 생각하고 요구사항과 가정을 분명히 하자 요구사항에 대한 질문 예시 구체적으로 어떤 기능들을 만들어야 하나?]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [2장] 개략적인 규모 추정</title>
    <link>https://riley817.github.io/chapter2/</link>
    <pubDate>Sat, 12 Aug 2023 13:41:30 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter2/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의하고 싶은 주제 SNS 서비스인 우리 서비스는 DAU(Daily active users)를 산출하고 싶습니다. 우리 회사의 서비스의 활성유저는 어떻게 정의 할 수있을까요? 요약 2의 제곱수 볼륨의 단위를 2의 제곱수로 표현하면 어떻게 되는지 알아야 한다. 흔히 쓰이는 데이터 볼륨 단위
2의제곱 근사치 이름 축약형 10 1천만(thousand) 1킬로바이트(Kilobyte) 1KB 20 1백만(milion) 1메가바이트(Megabyte) 1MB 30 10억(bilion) 1기가바이트(Gigabyte) 1GB 40 1조(trilion) 1테라바이트(Terabyte) 1TB 50 1000조(quadrilion) 1페타바이트(Petabyte) 1PB 모든 프로그래머가 알아야 하는 응답 지연 값 이들 가운데 몇몇은 더 빠른 컴퓨터가 등장하면서 유효하지 않게 되었지만 아직도 이 수치들은 컴퓨터 연산들의 처리 속도가 어느 정도인지 짐작할 수 있도록 해준다.]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [1장] 사용자 수에 따른 규모 확장성</title>
    <link>https://riley817.github.io/chapter1/</link>
    <pubDate>Thu, 10 Aug 2023 09:43:42 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter1/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의하고 싶은 주제 우리 서비스의 검색기능은 아직 없지만 인스타그램처럼 태그, 유저, 장소 등 통합 검색 기능이 추가되면 어떤 구조를 가져가면 좋을까요? 요약 단일서버 모든 컴포넌트가 단 한대의 서버에서 실행되는 간단한 시스템
도메인 이름을 이용하여 웹사이트에 접속. 도메인 이름은 도메인 이름 서비스(Domain Name Service, DNS)에 질의하여 IP 주소 반환 DNS 질의 결과로 IP 반환 IP 주소로 HTTPHyperText Transfer Protocol 요청이 전달 요청을 받은 웹 서버는 HTML 페이지 JSON 형태의 응답을 반환 데이터베이스 관계형 데이터베이스(Relational Data-base Management System, RDBMS)가 개발자들에게는 익숙하고 오랜기간 동안 잘 사용되어진 시스템이지만 구축하려는 시스템에 따라 꼭 최선의 시스템은 아닐 수 있다.]]></description>
</item>
<item>
    <title>[Go 언어를 활용한 네트워크 프로그래밍] 3. 신뢰성 있는 TCP 데이터 스트림</title>
    <link>https://riley817.github.io/network-programming-with-go-copy/</link>
    <pubDate>Mon, 10 Apr 2023 23:24:37 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/network-programming-with-go-copy/</guid>
    <description><![CDATA[Go 언어를 활용한 네트워크 프로그래밍 책 정리
TCP를 신뢰성 있게 만드는 것 패킷손실packet loss : 무선 네트워크 간섭이나 네트워크 정체 등의 이유로 데이터가 전송에 실패하여 목적지까지 도달하지 못한 경우 발생 네트워크 정체network congestion : 네트워크의 연결상 처리할 수 있는 양 이상의 데이터를 전송하려 할 때 발생 TCP는 흐름제어 flow control 절차를 통해 데이터의 전송 속도를 조정하여 네트워크의 상태가 변경되더라도 손실된 패킷을 최소로 유지하면서 데이터를 빠르게 전송할 수 있다. TCP는 수신한 패킷을 추적하고, 승인되지 않은 패킷은 필요에 따라 재전송 한다.]]></description>
</item>
<item>
    <title>[Go 언어를 활용한 네트워크 프로그래밍] 1. 네트워크 시스템 개요</title>
    <link>https://riley817.github.io/network-programming-with-go/</link>
    <pubDate>Tue, 07 Mar 2023 21:27:33 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/network-programming-with-go/</guid>
    <description><![CDATA[Go 언어를 활용한 네트워크 프로그래밍 책 정리
컴퓨터 네트워크(coumputer network) 란 두 개 이상의 장치 또는 노드간의 연결을 말한다.
네트워크 토폴로지 유형 네트워크 토폴로지topology 란 네트워크상의 노드의 구성을 말한다. 토폴로지의 유형은 점대점 연결형, 데이지 체인형, 버스형, 링형, 스타형, 그물형의 6가지 기본 범주로 나뉜다.
1. 점대점 point-to-point 연결형 두 노드가 하나의 연결을 공유 한다. 이러한 유형의 네트워크 연결을 드물지만 두 노드 간에 직접 통신이 필요할 때 매우 유용하다. 2. 데이지 체인 daisy chain 연결형 일련의 점대점 연결 출발지 노드와 목적지 노드 사이의 중간 노드를 일반적으로 홉이라고 한다.]]></description>
</item>
<item>
    <title>[Flutter] Flutter 개념 및 동작 원리</title>
    <link>https://riley817.github.io/flutter/</link>
    <pubDate>Thu, 16 Feb 2023 16:11:36 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/flutter/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/banner/flutter-logo.png" referrerpolicy="no-referrer">
            </div>플러터 구글에서 개발한 공개 모바일 SDK 이다. 모바일 앱을 만들기 위한 기존 방식은 안드로이드와 IOS를 별도로 구현하여 배포해야했기에 요구되는 기술 스펙과 비용이 컸으나 플러터를 사용하면 한번의 구현으로 배포가 가능하다. 플러터는 렌터링 엔진, UI 컴포넌트, 테스트 프레임워크, 도구, 라우터 등 앱 제작에 필요한 기능을 모두 제공하므로 개발자는 앱 구현에 집중하여 생산성을 높일 수 있다.
플러터가 Dart 언어를 사용하는 이유 다트는 JIT(just-in-time), AOT(ahead-of-time) 컴파일을 모두 지원한다. AOT 컴파일러는 다트 코드를 효율적인 네이티브 코드로 바꾸어 개발자 및 사용자가 모두 빠르게 사용할 수 있다.]]></description>
</item>
<item>
    <title>[Flutter Beginner] StatefulWidget</title>
    <link>https://riley817.github.io/flutter-beginner/</link>
    <pubDate>Fri, 03 Feb 2023 23:11:36 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/flutter-beginner/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/banner/flutter-logo.png" referrerpolicy="no-referrer">
            </div>Widget Widget은 모두 불변의 법칙을 가지고 있다. 그러나 위젯의 값을 변경해야 할 경우가 생긴다. 변경이 필요할 경우 기존 위젯을 삭제해버리고 완전 새로운 위젯으로 대체한다.
StatelessWidget Life Cycle Constructor로 생성이되고 생성이 되자마자 build 함수가 실행된다. 변경이 필요하면 새로운 위젯을 만든다. StatelessWidget은 라이프 사이클 동안 단 한번만 build 함수를 실행한다. StatefulWidget 생명주기 Construct createState : State를 생성 initState : State를 초기화. State가 생성될 때 단 한번만 호출된다. didChangeDependencies dirty 상태 : 변경이 필요한 상태를 의미한다.]]></description>
</item>
<item>
    <title>[iOS/Android] APP HTTP 접근 허용하기</title>
    <link>https://riley817.github.io/ios-allow/</link>
    <pubDate>Tue, 31 Jan 2023 23:39:01 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/ios-allow/</guid>
    <description><![CDATA[APP HTTP 접근 허용 설정하기 iOS ios/Runner/Info.plist
1 2 3 4 5 6 7 8 9 &lt;key&gt;NSAppTransportSecurity&lt;/key&gt; &lt;dict&gt; &lt;key&gt;NSAllowsLocalNetworking&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSAllowsArbitraryLoadsInWebContent&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;/plist&gt; Android android/app/src/main/AndroidManifest.xml
1 2 3 4 5 6 7 8 &lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; package=&#34;com.example.web_view&#34;&gt; &lt;uses-permission android:name=&#34;android.permission.INTERNET&#34;/&gt; &lt;!-- 추가 --&gt; &lt;application android:label=&#34;web_view&#34; android:name=&#34;${applicationName}&#34; android:icon=&#34;@mipmap/ic_launcher&#34; android:usesCleartextTraffic=&#34;true&#34;&gt; &lt;!-- 추가 --&gt; ]]></description>
</item>
<item>
    <title>[Dart] Dart 문법 정리</title>
    <link>https://riley817.github.io/dart/</link>
    <pubDate>Tue, 24 Jan 2023 16:40:55 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/dart/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/banner/dart.png" referrerpolicy="no-referrer">
            </div>😊 Dart 기본 문법의 헷갈리는 부분과 몰랐던 부분 정리! 🐸🐸 Final 과 const final과 const 키워드를 사용하여 선언하면 할당한 값을 변경할 수 없다. 둘다 상수를 선언할 때 사용하지만 차이점은 const는 complie-time에 상수를 설정하며 final은 runtime시에 결정되는 값도 상수로 설정할 수 있다.
1 2 3 4 // error const DateTime now1 = DateTime.now(); // error! const는 runtime시에 값이 결정되는 값은 설정할 수 없다. final DateTime now2 = DateTime.now(); // final은 runtime시에 결정되는 값도 설정 가능하다.]]></description>
</item>
<item>
    <title>[buf] buf로 protobuf 사용하기</title>
    <link>https://riley817.github.io/buf/</link>
    <pubDate>Mon, 23 Jan 2023 19:11:56 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/buf/</guid>
    <description><![CDATA[buf buf는 IDL(Interface description language) 중 하나인 protobuf를 사용하기 쉽게 여러가지 기능을 제공하고 있다. protobuf를 사용하면서 발생하는 문제는 다음과 같다.
API 설계가 일관성이 없다. 의존성 관리가 중앙에서 이루어지지 않고 있다. protobuf의 버전관리가 잘 이루어지지 않는다. protoc를 통한 stub 배포 및 관리가 어렵다 mock 서버 생성, fuzz testing, 문서화 할 수 있는 툴들이 많이 존재하지 않는다. buf에서 제공하는 툴 buf cli 발전된 protobuf 컴파일러를 제공한다. 좋은 API 디자인과 구조를 lint 기능을 통해 선택할 수 있다.]]></description>
</item>
</channel>
</rss>
