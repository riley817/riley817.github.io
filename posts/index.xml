<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Riley&#39;s DevLog</title>
        <link>https://riley817.github.io/posts/</link>
        <description>All Posts | Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Tue, 14 Feb 2023 23:51:47 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>[TIL &amp; Issue Note] 20230214</title>
    <link>https://riley817.github.io/20230215/</link>
    <pubDate>Tue, 14 Feb 2023 23:51:47 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230215/</guid>
    <description><![CDATA[ Tucker의 게임 네트워킹의 이해 - 2
Protocol 약속, 규약 Network Protocol : 통신 규약 컴퓨터간 통신을 하기 위해서는 약속이 필요하다. ]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20230214</title>
    <link>https://riley817.github.io/20230214/</link>
    <pubDate>Tue, 14 Feb 2023 00:12:09 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230214/</guid>
    <description><![CDATA[Tucker의 게임 네트워킹의 이해 - 1
네트워킹 데이터를 주고 받는 것 컴퓨터 내부에서 발생하는 데이터 교환도 네트워킹이라고 볼 수 있다. 흔히 네트워킹이라고 말하면 외부에 멀리 떨어져 있는 컴퓨터들끼리의 데이터 교환을 의미한다. 내부 네트워킹과 외부 네트워킹간 차이 외부 네트워킹의 경우 지연시간이 발생한다 (latency)
RTT(Round Trip Time, 패킷왕복시간) : 패킷이 목적지에 도달하고나서 해당 패킷에 대한 응답이 출발지로 다시 돌아오기까지의 시간 지연시간의 경우 물리적인 환경의 문제이므로 줄이기가 어렵다. 게임에서는 눈속임을 통한 지연시간을 해소 연결 안전성 (연결 불안정)]]></description>
</item>
<item>
    <title>[Flutter Beginner] StatefulWidget</title>
    <link>https://riley817.github.io/flutter-beginner/</link>
    <pubDate>Fri, 03 Feb 2023 23:11:36 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/flutter-beginner/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/banner/flutter-logo.png" referrerpolicy="no-referrer">
            </div>Widget Widget은 모두 불변의 법칙을 가지고 있다. 그러나 위젯의 값을 변경해야 할 경우가 생긴다. 변경이 필요할 경우 기존 위젯을 삭제해버리고 완전 새로운 위젯으로 대체한다.
StatelessWidget Life Cycle Constructor로 생성이되고 생성이 되자마자 build 함수가 실행된다. 변경이 필요하면 새로운 위젯을 만든다. StatelessWidget은 라이프 사이클 동안 단 한번만 build 함수를 실행한다. StatefulWidget 생명주기 Construct createState : State를 생성 initState : State를 초기화. State가 생성될 때 단 한번만 호출된다. didChangeDependencies dirty 상태 : 변경이 필요한 상태를 의미한다.]]></description>
</item>
<item>
    <title>[iOS/Android] APP HTTP 접근 허용하기</title>
    <link>https://riley817.github.io/ios-allow/</link>
    <pubDate>Tue, 31 Jan 2023 23:39:01 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/ios-allow/</guid>
    <description><![CDATA[APP HTTP 접근 허용 설정하기 iOS ios/Runner/Info.plist
1 2 3 4 5 6 7 8 9 &lt;key&gt;NSAppTransportSecurity&lt;/key&gt; &lt;dict&gt; &lt;key&gt;NSAllowsLocalNetworking&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSAllowsArbitraryLoadsInWebContent&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;/plist&gt; Android android/app/src/main/AndroidManifest.xml
1 2 3 4 5 6 7 8 &lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; package=&#34;com.example.web_view&#34;&gt; &lt;uses-permission android:name=&#34;android.permission.INTERNET&#34;/&gt; &lt;!-- 추가 --&gt; &lt;application android:label=&#34;web_view&#34; android:name=&#34;${applicationName}&#34; android:icon=&#34;@mipmap/ic_launcher&#34; android:usesCleartextTraffic=&#34;true&#34;&gt; &lt;!-- 추가 --&gt; ]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20230126</title>
    <link>https://riley817.github.io/20230126/</link>
    <pubDate>Thu, 26 Jan 2023 23:33:57 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230126/</guid>
    <description><![CDATA[Issue flutter 환경을 설정하던 중 안드로이드 라이센스 관련 명령어 실행시 에러 UnsupportedClassVersionError while &lsquo;flutter doctor &ndash;android-licenses&rsquo; MacOS 사용 환경 MacOS Ventura (M1 Mac) Android Studio Electric Eel 에러 내용 1 2 3 4 Exception in thread &#34;main&#34; java.lang.UnsupportedClassVersionError: com/android/prefs/AndroidLocationsProvider has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0 해결 내용 Agree to Andorid License 1 2 3 1.]]></description>
</item>
<item>
    <title>[TIL &amp; Issue Note] 20230211</title>
    <link>https://riley817.github.io/20230211/</link>
    <pubDate>Thu, 26 Jan 2023 23:33:57 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/20230211/</guid>
    <description><![CDATA[전통적인 게임의 서버 구조 P2P 서버에 참여하는 구성원들이 서버이자 클라이언트의 역할을 한다. 주로 격투게임, 소규모 FPS 게임 등 반응 속도가 빨라야하는 장르에서 많이 사용했다. 인원수에 따라 유지해야 하는 연결의 개수가 많아 진다. Host 방식 게임에 참가하는 참가자 중 제일 처음 방을 만드는 참가자의 클라이언트를 서버로 사용 나머지 참가자는 클라이언트로서의 역할을 한다. 게임의 검증, 결과 판정 등은 호스트 클라이언트가 담당한다. 호스트에게 모든 데이터가 집중되므로 호스트의 컴퓨터 성능이 좋아야 한다. 호스트의 서버가 연결을 종료할 경우 접속한 모든 클라이언트가 게임을 할 수 없다.]]></description>
</item>
<item>
    <title>[Dart] Dart 문법 정리</title>
    <link>https://riley817.github.io/dart/</link>
    <pubDate>Tue, 24 Jan 2023 16:40:55 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/dart/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/banner/dart.png" referrerpolicy="no-referrer">
            </div>😊 Dart 기본 문법의 헷갈리는 부분과 몰랐던 부분 정리! 🐸🐸 Final 과 const final과 const 키워드를 사용하여 선언하면 할당한 값을 변경할 수 없다. 둘다 상수를 선언할 때 사용하지만 차이점은 const는 complie-time에 상수를 설정하며 final은 runtime시에 결정되는 값도 상수로 설정할 수 있다.
1 2 3 4 // error const DateTime now1 = DateTime.now(); // error! const는 runtime시에 값이 결정되는 값은 설정할 수 없다. final DateTime now2 = DateTime.now(); // final은 runtime시에 결정되는 값도 설정 가능하다.]]></description>
</item>
<item>
    <title>28. AWS Virtual Private Cloud(VPC)</title>
    <link>https://riley817.github.io/aws-28-vpc/</link>
    <pubDate>Mon, 15 Aug 2022 17:26:41 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/aws-28-vpc/</guid>
    <description><![CDATA[CIDR - IPv4 Classless Inter-Domain Routing : IP 주소 할당 방법 Security Groups : 규칙 및 AWS 네트워킹에 일반적으로 사용 Base IP : 범위에 포함된 IP를 나타냄 (e.g., 10.0.0.0, 192.168.0.0 &hellip;) Subnet Mask IP에서 변경할 수 있는 비트 수를 정의 (e.g., /0, /24, /32) /8 : 255.0.0.0 /16 : 255.255.0.0 /24 : 255.255.255.0 /32 : 255.255.255.255 Subnet Mask Subnet Mask 사용하면 기본적으로 기본IP에서 다음 값을 추가로 가져올 수 있다.
IPLocationTools IP/Subnet Mask 192.]]></description>
</item>
<item>
    <title>27. AWS Security &amp; Encryption</title>
    <link>https://riley817.github.io/aws-27-security-encryption/</link>
    <pubDate>Sun, 14 Aug 2022 23:31:49 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/aws-27-security-encryption/</guid>
    <description><![CDATA[전송중 암호화 (SSL) 데이터를 전송하기 전에 암호화. 수신 후 복호화 SSL 인증서로 암호화 (HTTPS) 전송 중 암호화는 MITM(man in the middle attack)이 발생하지 않도록 보장 Server side encryption at rest 데이터가 서버에 수신 된 후 암호화 데이터가 서버에 전송 전 복호화 데이터 키라고 불리우는 키 덕분에 데이터는 암호화 된 형태로 저장 암호화 및 복호화 키는 어딘가에 관리되어야 하며 서버는 이에 대한 액세스 권한이 있어야 한다. Client side encryption 데이터가 클라이언트에 의해 암호화되고 서버는 복호화할 수 없음 데이터는 수신 클라이언트에 의해 복호화 서버는 데이터의 암호를 복호화 할 수 없음 Envelop Encryption 암호화를 활용 AWS KMS (Key Management Service) KMS 키를 사용하여 데이터에 액세스할 수 있는 사람과 대상을 쉽게 제어]]></description>
</item>
<item>
    <title>18. AWS Integration &amp; Messaging</title>
    <link>https://riley817.github.io/aws-18-integration-messaging/</link>
    <pubDate>Tue, 02 Aug 2022 09:16:41 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/aws-18-integration-messaging/</guid>
    <description><![CDATA[Application communication Application communication 두 가지 패턴 Synchronous communications (application to application) Synchronous는 요청량이 급증하면 애플리케이션간 여러 문제를 유발시킬 수 있다. Asynchronous / Event based (application to queue to application) 애플리케이션 의존관계decouple를 낮추는 사례 아래 서비스들을 사용하여 즉각적으로 애플리케이션을 확장가능 하다.
SQS 사용 : Queue 모델 SNS 사용 : pub/sub 모델 Kinesis : 실시간 스트리밍 모델 Amazon SQS Amazon SQS - Standard Queue AWS에서 가장 오래된 서비스. 애플리케이션을 decoupling하기 위해 서비스를 관리 중복 메세지를 갖을 수 있다.]]></description>
</item>
</channel>
</rss>
