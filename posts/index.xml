<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Riley&#39;s DevLog</title>
        <link>https://riley817.github.io/posts/</link>
        <description>All Posts | Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Mon, 10 Apr 2023 23:24:37 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>[Go 언어를 활용한 네트워크 프로그래밍] 3. 신뢰성 있는 TCP 데이터 스트림</title>
    <link>https://riley817.github.io/network-programming-with-go-copy/</link>
    <pubDate>Mon, 10 Apr 2023 23:24:37 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/network-programming-with-go-copy/</guid>
    <description><![CDATA[Go 언어를 활용한 네트워크 프로그래밍 책 정리
TCP를 신뢰성 있게 만드는 것 패킷손실packet loss : 무선 네트워크 간섭이나 네트워크 정체 등의 이유로 데이터가 전송에 실패하여 목적지까지 도달하지 못한 경우 발생 네트워크 정체network congestion : 네트워크의 연결상 처리할 수 있는 양 이상의 데이터를 전송하려 할 때 발생 TCP는 흐름제어 flow control 절차를 통해 데이터의 전송 속도를 조정하여 네트워크의 상태가 변경되더라도 손실된 패킷을 최소로 유지하면서 데이터를 빠르게 전송할 수 있다. TCP는 수신한 패킷을 추적하고, 승인되지 않은 패킷은 필요에 따라 재전송 한다.]]></description>
</item>
<item>
    <title>[Go 언어를 활용한 네트워크 프로그래밍] 1. 네트워크 시스템 개요</title>
    <link>https://riley817.github.io/network-programming-with-go/</link>
    <pubDate>Tue, 07 Mar 2023 21:27:33 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/network-programming-with-go/</guid>
    <description><![CDATA[Go 언어를 활용한 네트워크 프로그래밍 책 정리
컴퓨터 네트워크(coumputer network) 란 두 개 이상의 장치 또는 노드간의 연결을 말한다.
네트워크 토폴로지 유형 네트워크 토폴로지topology 란 네트워크상의 노드의 구성을 말한다. 토폴로지의 유형은 점대점 연결형, 데이지 체인형, 버스형, 링형, 스타형, 그물형의 6가지 기본 범주로 나뉜다.
1. 점대점 point-to-point 연결형 두 노드가 하나의 연결을 공유 한다. 이러한 유형의 네트워크 연결을 드물지만 두 노드 간에 직접 통신이 필요할 때 매우 유용하다. 2. 데이지 체인 daisy chain 연결형 일련의 점대점 연결 출발지 노드와 목적지 노드 사이의 중간 노드를 일반적으로 홉이라고 한다.]]></description>
</item>
<item>
    <title>[Flutter] Flutter 개념 및 동작 원리</title>
    <link>https://riley817.github.io/flutter/</link>
    <pubDate>Thu, 16 Feb 2023 16:11:36 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/flutter/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/banner/flutter-logo.png" referrerpolicy="no-referrer">
            </div>플러터 구글에서 개발한 공개 모바일 SDK 이다. 모바일 앱을 만들기 위한 기존 방식은 안드로이드와 IOS를 별도로 구현하여 배포해야했기에 요구되는 기술 스펙과 비용이 컸으나 플러터를 사용하면 한번의 구현으로 배포가 가능하다. 플러터는 렌터링 엔진, UI 컴포넌트, 테스트 프레임워크, 도구, 라우터 등 앱 제작에 필요한 기능을 모두 제공하므로 개발자는 앱 구현에 집중하여 생산성을 높일 수 있다.
플러터가 Dart 언어를 사용하는 이유 다트는 JIT(just-in-time), AOT(ahead-of-time) 컴파일을 모두 지원한다. AOT 컴파일러는 다트 코드를 효율적인 네이티브 코드로 바꾸어 개발자 및 사용자가 모두 빠르게 사용할 수 있다.]]></description>
</item>
<item>
    <title>[Flutter Beginner] StatefulWidget</title>
    <link>https://riley817.github.io/flutter-beginner/</link>
    <pubDate>Fri, 03 Feb 2023 23:11:36 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/flutter-beginner/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/banner/flutter-logo.png" referrerpolicy="no-referrer">
            </div>Widget Widget은 모두 불변의 법칙을 가지고 있다. 그러나 위젯의 값을 변경해야 할 경우가 생긴다. 변경이 필요할 경우 기존 위젯을 삭제해버리고 완전 새로운 위젯으로 대체한다.
StatelessWidget Life Cycle Constructor로 생성이되고 생성이 되자마자 build 함수가 실행된다. 변경이 필요하면 새로운 위젯을 만든다. StatelessWidget은 라이프 사이클 동안 단 한번만 build 함수를 실행한다. StatefulWidget 생명주기 Construct createState : State를 생성 initState : State를 초기화. State가 생성될 때 단 한번만 호출된다. didChangeDependencies dirty 상태 : 변경이 필요한 상태를 의미한다.]]></description>
</item>
<item>
    <title>[iOS/Android] APP HTTP 접근 허용하기</title>
    <link>https://riley817.github.io/ios-allow/</link>
    <pubDate>Tue, 31 Jan 2023 23:39:01 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/ios-allow/</guid>
    <description><![CDATA[APP HTTP 접근 허용 설정하기 iOS ios/Runner/Info.plist
1 2 3 4 5 6 7 8 9 &lt;key&gt;NSAppTransportSecurity&lt;/key&gt; &lt;dict&gt; &lt;key&gt;NSAllowsLocalNetworking&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSAllowsArbitraryLoadsInWebContent&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;/plist&gt; Android android/app/src/main/AndroidManifest.xml
1 2 3 4 5 6 7 8 &lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; package=&#34;com.example.web_view&#34;&gt; &lt;uses-permission android:name=&#34;android.permission.INTERNET&#34;/&gt; &lt;!-- 추가 --&gt; &lt;application android:label=&#34;web_view&#34; android:name=&#34;${applicationName}&#34; android:icon=&#34;@mipmap/ic_launcher&#34; android:usesCleartextTraffic=&#34;true&#34;&gt; &lt;!-- 추가 --&gt; ]]></description>
</item>
<item>
    <title>[Dart] Dart 문법 정리</title>
    <link>https://riley817.github.io/dart/</link>
    <pubDate>Tue, 24 Jan 2023 16:40:55 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/dart/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/banner/dart.png" referrerpolicy="no-referrer">
            </div>😊 Dart 기본 문법의 헷갈리는 부분과 몰랐던 부분 정리! 🐸🐸 Final 과 const final과 const 키워드를 사용하여 선언하면 할당한 값을 변경할 수 없다. 둘다 상수를 선언할 때 사용하지만 차이점은 const는 complie-time에 상수를 설정하며 final은 runtime시에 결정되는 값도 상수로 설정할 수 있다.
1 2 3 4 // error const DateTime now1 = DateTime.now(); // error! const는 runtime시에 값이 결정되는 값은 설정할 수 없다. final DateTime now2 = DateTime.now(); // final은 runtime시에 결정되는 값도 설정 가능하다.]]></description>
</item>
<item>
    <title>[buf] buf로 protobuf 사용하기</title>
    <link>https://riley817.github.io/buf/</link>
    <pubDate>Mon, 23 Jan 2023 19:11:56 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/buf/</guid>
    <description><![CDATA[buf buf는 IDL(Interface description language) 중 하나인 protobuf를 사용하기 쉽게 여러가지 기능을 제공하고 있다. protobuf를 사용하면서 발생하는 문제는 다음과 같다.
API 설계가 일관성이 없다. 의존성 관리가 중앙에서 이루어지지 않고 있다. protobuf의 버전관리가 잘 이루어지지 않는다. protoc를 통한 stub 배포 및 관리가 어렵다 mock 서버 생성, fuzz testing, 문서화 할 수 있는 툴들이 많이 존재하지 않는다. buf에서 제공하는 툴 buf cli 발전된 protobuf 컴파일러를 제공한다. 좋은 API 디자인과 구조를 lint 기능을 통해 선택할 수 있다.]]></description>
</item>
<item>
    <title>28. AWS Virtual Private Cloud(VPC)</title>
    <link>https://riley817.github.io/aws-28-vpc/</link>
    <pubDate>Mon, 15 Aug 2022 17:26:41 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/aws-28-vpc/</guid>
    <description><![CDATA[CIDR - IPv4 Classless Inter-Domain Routing : IP 주소 할당 방법 Security Groups : 규칙 및 AWS 네트워킹에 일반적으로 사용 Base IP : 범위에 포함된 IP를 나타냄 (e.g., 10.0.0.0, 192.168.0.0 &hellip;) Subnet Mask IP에서 변경할 수 있는 비트 수를 정의 (e.g., /0, /24, /32) /8 : 255.0.0.0 /16 : 255.255.0.0 /24 : 255.255.255.0 /32 : 255.255.255.255 Subnet Mask Subnet Mask 사용하면 기본적으로 기본IP에서 다음 값을 추가로 가져올 수 있다.
IPLocationTools IP/Subnet Mask 192.]]></description>
</item>
<item>
    <title>27. AWS Security &amp; Encryption</title>
    <link>https://riley817.github.io/aws-27-security-encryption/</link>
    <pubDate>Sun, 14 Aug 2022 23:31:49 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/aws-27-security-encryption/</guid>
    <description><![CDATA[전송중 암호화 (SSL) 데이터를 전송하기 전에 암호화. 수신 후 복호화 SSL 인증서로 암호화 (HTTPS) 전송 중 암호화는 MITM(man in the middle attack)이 발생하지 않도록 보장 Server side encryption at rest 데이터가 서버에 수신 된 후 암호화 데이터가 서버에 전송 전 복호화 데이터 키라고 불리우는 키 덕분에 데이터는 암호화 된 형태로 저장 암호화 및 복호화 키는 어딘가에 관리되어야 하며 서버는 이에 대한 액세스 권한이 있어야 한다. Client side encryption 데이터가 클라이언트에 의해 암호화되고 서버는 복호화할 수 없음 데이터는 수신 클라이언트에 의해 복호화 서버는 데이터의 암호를 복호화 할 수 없음 Envelop Encryption 암호화를 활용 AWS KMS (Key Management Service) KMS 키를 사용하여 데이터에 액세스할 수 있는 사람과 대상을 쉽게 제어]]></description>
</item>
<item>
    <title>18. AWS Integration &amp; Messaging</title>
    <link>https://riley817.github.io/aws-18-integration-messaging/</link>
    <pubDate>Tue, 02 Aug 2022 09:16:41 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/aws-18-integration-messaging/</guid>
    <description><![CDATA[Application communication Application communication 두 가지 패턴 Synchronous communications (application to application) Synchronous는 요청량이 급증하면 애플리케이션간 여러 문제를 유발시킬 수 있다. Asynchronous / Event based (application to queue to application) 애플리케이션 의존관계decouple를 낮추는 사례 아래 서비스들을 사용하여 즉각적으로 애플리케이션을 확장가능 하다.
SQS 사용 : Queue 모델 SNS 사용 : pub/sub 모델 Kinesis : 실시간 스트리밍 모델 Amazon SQS Amazon SQS - Standard Queue AWS에서 가장 오래된 서비스. 애플리케이션을 decoupling하기 위해 서비스를 관리 중복 메세지를 갖을 수 있다.]]></description>
</item>
</channel>
</rss>
