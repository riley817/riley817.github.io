<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go - Tag - Riley&#39;s DevLog</title>
        <link>https://riley817.github.io/tags/go/</link>
        <description>go - Tag - Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Wed, 27 Apr 2022 17:51:49 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/tags/go/" rel="self" type="application/rss+xml" /><item>
    <title>[Tucker의 Go 프로그래밍] 19. Go 인터페이스</title>
    <link>https://riley817.github.io/categories/tucker-go/chapter19-interface/</link>
    <pubDate>Wed, 27 Apr 2022 17:51:49 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/tucker-go/chapter19-interface/</guid>
    <description><![CDATA[Tucker의 Go 언어 프로그래밍 책 내용을 정리하였습니다.
1. 인터페이스 정의 인터페이스 선언 인터페이스 선언은 type을 쓴 뒤 인터페이스 명을 쓰고 interface 키워드를 쓴다. 그런 뒤 {} 블록 안에 인터페이스에 포함된 메서드 집합을 써준다. 1 2 3 4 type DuckInterface interface { Fly() Walk(distance int) int } 유의사항 메서드는 반드시 메서드명이 있어야한다. 매개변수와 반환이 다르더라도 이름이 같은 메서드는 있을 수 없다. 인터페이스에서는 메서드 구현을 포함하지 않는다. 인터페이스 선언 예제 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import &#34;fmt&#34; type Stringer interface { String() string } type Student struct { Name string Age int } func (s Student) String() string { return fmt.]]></description>
</item>
<item>
    <title>[Tucker의 Go 프로그래밍] 18. 슬라이스</title>
    <link>https://riley817.github.io/categories/tucker-go/chapter18-slice/</link>
    <pubDate>Tue, 26 Apr 2022 14:50:36 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/tucker-go/chapter18-slice/</guid>
    <description><![CDATA[Tucker의 Go 언어 프로그래밍 책 내용을 정리하였습니다.
슬라이스는 Go에서 제공하는 동적 배열 타입이다. 동적 배열은 실행 도중 배열의 사이즈가 계속 바뀔 수 있다.
정적, 동적 상수와 변수의 차이를 생각하면 간단하다.
정적(static) : compile time, build time 시 값이 결정된다. 실행 도중에 절대 바뀔 수 없다. 동적(dynamic) : Runtime. 프로그램 실행 도중에 계속 값이 바뀔 수 있다. 다른언어에서 slice와 비슷한 개념 (동일하지는 않다.) C++ : Vector&lt;int&gt; Java : ArrayList Python : slice Javascript : 기본적으로 동적 배열 1.]]></description>
</item>
<item>
    <title>Go 인터페이스</title>
    <link>https://riley817.github.io/categories/golang/go-interface/</link>
    <pubDate>Mon, 23 Aug 2021 17:51:49 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/golang/go-interface/</guid>
    <description><![CDATA[Tucker의 Go 언어 프로그래밍 책 내용을 정리하였습니다.
1. 인터페이스 정의 인터페이스 선언 인터페이스 선언은 type을 쓴 뒤 인터페이스 명을 쓰고 interface 키워드를 쓴다. 그런 뒤 {} 블록 안에 인터페이스에 포함된 메서드 집합을 써준다. 1 2 3 4 type DuckInterface interface { Fly() Walk(distance int) int } 유의사항 메서드는 반드시 메서드명이 있어야한다. 매개변수와 반환이 다르더라도 이름이 같은 메서드는 있을 수 없다. 인터페이스에서는 메서드 구현을 포함하지 않는다. 인터페이스 선언 예제 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import &#34;fmt&#34; type Stringer interface { String() string } type Student struct { Name string Age int } func (s Student) String() string { return fmt.]]></description>
</item>
<item>
    <title>[Tucker]Go 개발 환경 설정 - 윈도우즈</title>
    <link>https://riley817.github.io/categories/golang/tucker-go-section1/</link>
    <pubDate>Fri, 20 Aug 2021 14:09:30 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/golang/tucker-go-section1/</guid>
    <description><![CDATA[설치할 것들 Go Git Visual Studio Code ]]></description>
</item>
<item>
    <title>Go 문자열 구조</title>
    <link>https://riley817.github.io/categories/golang/go-string/</link>
    <pubDate>Fri, 20 Aug 2021 14:09:30 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/golang/go-string/</guid>
    <description><![CDATA[Tucker의 Go 언어 프로그래밍 책 내용을 정리하였습니다.
string 구조 string 타입은 Go 언어에서 제공하는 내장 타입으로 그 내부구현은 감추어져 있다. 하지만 reflect 패키지 안의 StringHeader 구조체를 통해 내부구조를 엿볼 수 있다. 1 2 3 4 5 6 7 8 9 10 // StringHeader is the runtime representation of a string. // It cannot be used safely or portably and its representation may // change in a later release. // Moreover, the Data field is not sufficient to guarantee the data // it references will not be garbage collected, so programs must keep // a separate, correctly typed pointer to the underlying data.]]></description>
</item>
<item>
    <title>Go 스택 메모리와 힙 메모리</title>
    <link>https://riley817.github.io/categories/golang/go-escape-analysis/</link>
    <pubDate>Thu, 19 Aug 2021 16:32:05 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/golang/go-escape-analysis/</guid>
    <description><![CDATA[음.. 완벽하게 이해하지는 못했다 😇😇😇
스택 메모리와 힙 메모리 대부분의 프로그래밍 언어는 메모리를 할당할 때 스택 메모리 영역 또는 힙 메모리 영역을 사용한다. 함수 내부에서만 사용되는 값은 스택 메모리에 할당된다. 함수 외부로 공개되는 메모리 공간은 힙 메모리 영역에 할당된다. C/C++ 언어에서는 malloc() 함수를 직접 호출해서 힙 메모리 공간을 할당한다. 자바의 경우 클래스 타입을 힙에, 기본 타입을 스택에 할당한다. Go 언어는 이스케이프 분석(escape analysis) 을 해서 어느 메모리에 할당할지 결정한다. 이스케이프 분석(escape analysis) GC 컴파일러는 함수와 패키지를 넘어 전역적으로 탈출 검사를 수행한다.]]></description>
</item>
<item>
    <title>Go 상수와 리터럴</title>
    <link>https://riley817.github.io/categories/golang/go-constant-literal/</link>
    <pubDate>Thu, 19 Aug 2021 16:24:39 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/golang/go-constant-literal/</guid>
    <description><![CDATA[Tucker의 Go 언어 프로그래밍 책 내용을 정리하였습니다.
상수와 리터럴 상수 (Constant) 상수는 변하지 않는 값을 의미한다. 한번 초기화 하면 값을 바꿀 수 없다. 정수, 실수, 문자열 등 기본 타입값들로만 상수로 선언될 수 있다. 구조체, 배열 등 기본 타입이 아닌 타입에는 상수를 사용할 수 없다. 상수로 사용될 수 있는 타입 불리언 룬 정수 실수 복소수 문자열 상수는 값으로만 동작한다. 변수가 값, 이름, 타입, 메모리 주소 4가지 속성을 가지는 반면 상수는 값, 이름, 타입 3가지 속성만 가진다.]]></description>
</item>
<item>
    <title>실수 오차</title>
    <link>https://riley817.github.io/categories/golang/go-comparison-operator/</link>
    <pubDate>Wed, 18 Aug 2021 14:42:00 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/golang/go-comparison-operator/</guid>
    <description><![CDATA[Tucker의 Go 언어 프로그래밍 책 내용을 참고 및 정리해서 작성하였습니다.
실수 끼리의 비교연산에서 예기치 않은 결과가 나올 때가 있다. 0.1 + 0.2 = 0.3의 결과를 예상하였지만 실제 출력값은 0.30000000000000004가 출력되었다.
1 2 3 4 5 6 7 8 9 10 11 12 package main import &#34;fmt&#34; func main() { var a float64 = 0.1 var b float64 = 0.2 var c float64 = 0.3 fmt.Printf(&#34;%f + %f == %f : %v\n&#34;, a, b, c, a+b == c) fmt.]]></description>
</item>
<item>
    <title>Section 12 : 패키지 고급</title>
    <link>https://riley817.github.io/categories/golang/easy-golang-section12/</link>
    <pubDate>Fri, 23 Apr 2021 16:44:26 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/golang/easy-golang-section12/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
12.1 사용자 패키지 제작 및 문서화 12.1.1 사용자 패키지 작성 및 문서화 go 에서 패키지는 폴더명(디렉토리명)으로 접근한다. → 그러므로 명확하게 지정해야 한다. 사용자 패키지를 문서화 할 때 main 패키지를 제외하고 package 문서에 등록된다. 기본적으로 GOROOT 의 패키지에서 검색 → 없으면 GOPATH 패키지를 검색한다. go install 명령어 : GOPATH/pkg 에 패키지 등록 godoc -http:=6060 으로 본인 패키지 메소드 및 주석을 확인 할 수 있다.]]></description>
</item>
<item>
    <title>Section 11 : Go 파일 입출력</title>
    <link>https://riley817.github.io/categories/golang/easy-golang-section11/</link>
    <pubDate>Fri, 23 Apr 2021 15:36:01 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/categories/golang/easy-golang-section11/</guid>
    <description><![CDATA[인프런 쉽고 빠르게 끝내는 GO언어 프로그래밍 핵심 기초 입문 과정 강의 정리
11.1 파일 입출력 11.1.1 os 패키지 - 파일 읽기, 쓰기 Go에서 파일을 읽고 쓰기 위해 Go 표준 패키지인 os 패키지를 사용할 수 있다.
os.Open() : 기존 파일 열기 os.Create() : 새 파일을 생성 os.Close() : 파일 리소스 닫기 파일 읽기 및 탐색 예제 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package main import ( &#34;fmt&#34; &#34;os&#34; ) // 에러 체크 방식 1 func errCheck1(e error) { if e !]]></description>
</item>
</channel>
</rss>
