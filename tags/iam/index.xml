<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>IAM - Tag - Riley&#39;s DevLog</title>
        <link>https://riley817.github.io/tags/iam/</link>
        <description>IAM - Tag - Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Sun, 17 Jul 2022 18:27:40 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/tags/iam/" rel="self" type="application/rss+xml" /><item>
    <title>AWS IAM</title>
    <link>https://riley817.github.io/archives/devops/aws/aws/aws-iam/</link>
    <pubDate>Sun, 17 Jul 2022 18:27:40 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/archives/devops/aws/aws/aws-iam/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/posts/images/aws/aws-logo.png" referrerpolicy="no-referrer">
            </div>IAM:Identity and Access Management Global Service로 리전 상관없이 설정함 사용자Users는 조직내 사용자이며 그룹화 할 수 있다. 그룹Group는 오직 사용자users만 포함할 수 있고 다른 그룹은 포함할 수 없다. 사용자는 그룹에 속하지 않을수도 있고 여러 그룹에 속할 수도 있다. Permissions AWS 서비스 및 리소스를 액세스하고 사용하도록 허용하기 위해서는 권한을 부여해야한다. 사용자 또는 그룹에 정책policies이라고 하는 JSON 문서를 지정하게 된다. 정책은 사용자의 권한permissions을 정의한다. AWS에서는 최소 권한 원칙(least privilege principle)을 적용한다. 사용자에게 필요 이상의 권한을 부여하지 않는 것을 권장한다.]]></description>
</item>
<item>
    <title>AWS Identity and Access Management</title>
    <link>https://riley817.github.io/aws-iam/</link>
    <pubDate>Wed, 13 Jul 2022 01:10:49 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/aws-iam/</guid>
    <description><![CDATA[Users &amp; Groups IAM = Identity and Access Management → Global 서비스 Root 계정으로 생성 Users 는 조직의 사용자이며 그룹으로 묶을 수 있다. Groups는 user를 포함할 수 있고 다른 그룹은 포함할 수 없다. user는 여러 그룹에 속할 수 있다. Permissions Users or Groups 은 JSON 문서형태로 정책을 할당 정책 polices는 사용자의 permissions을 정의 AWS에서는 최소 권한 원칙을 적용한다 → 사용자가 필요로 하는 것보다 더 많은 권한을 부여하지 않는다. IAM Policies inheritance 인라인 정책 : 그룹에 속해있지 않아도 정책을 바로 사용자에게 연결 가능 IAM Policies Structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 { &#34;Version&#34;: &#34;2012-10-17&#34;, &#34;Statement&#34;: [ { &#34;Effect&#34;: &#34;Allow&#34;, &#34;Action&#34;: &#34;ec2:Describe*&#34;, &#34;Resource&#34;: &#34;*&#34; }, { &#34;Effect&#34;: &#34;Allow&#34;, &#34;Action&#34;: &#34;elasticloadbalancing:Describe*&#34;, &#34;Resource&#34;: &#34;* }, { &#34;Effect&#34;: &#34;Allow&#34;, &#34;Action&#34;: [ &#34;cloudwatch:ListMetrics&#34;, &#34;cloudwatch:GetMetricStatistics&#34;, &#34;cloudwatch:Describe*&#34; ], &#34;Resource&#34;: &#34;*&#34; } ] } 요소 Version : 정책 버전 Id : 정책을 식별할 수 있는 식별자 - 옵션 Statement : 하나 혹은 여러개 (필수사항) Statements 요소 Sid : statement 의 식별자 (옵션) Effect : 특정 statement에 접근은 허용 여부 (Allow 또는 Deny)를 나타냄 Principal : 정책이 적용 될 대상 (계정, 사용자, 역할) Action : 정책의 허용 또는 거부되는 호출 리스트 목록 Resource : 정책이 적용될 리소스 목록 Condition : statement가 언제적용될지 결정 (옵션) IAM Password Policy 강력한 비밀번호 → 계정에 대한 높은 보안 AWS에서는 설정가능한 패스워드 정책 패스워드 최소 길이 특수문자 포함 필수 입력 : 대소문자, 숫자, 특수문자 IAM 계정 사용자들의 패스워드 변경 허용 또는 금지 패스워드 만료 지정 패스워드 재사용 금지 MFA - Multi Factor Authentication MFA = 패스워드(사용자만 알고있는) + 보안 장비(사용자가 소유하고 있는) MFA devices options in AWS Virtual MFA device 하나의 디바이스에서 여러 토큰을 지원 Google Authenticator → phone only Authy → Multi device Universal 2nd Factor(U2F) Security Key YubiKey 하나의 키로 루트 그리고 IAM 사용자 지원 기타 Hardware Key Fob MFA Device Hardware Key Fob MFA Device for AWS GovCloud (US) AWS 액세스 하는 방법 AWS 액세스하는 방법 AWS Management Console : 패스워드 + MFA 사용 AWS Command Line Interface CLI : access key 사용 AWS Software Developer Kit SDK : access key 사용 Access Key는 AWS 콘솔을 통해 생성할 수 있다.]]></description>
</item>
<item>
    <title>AWS Identity and Access Management - Advanced</title>
    <link>https://riley817.github.io/aws-iam-advanced/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/aws-iam-advanced/</guid>
    <description><![CDATA[STS - Security Token Service AWS 리소스에 대한 제한적이고 일시적인 액세스 권한을 허용 토큰은 1 시간까지 유효 (새로고침 필요) STS API STS API 설명 AssumeRole - 개인 계정 내에서: 보안을 강화하기 위해 사용 - 계정 간 : 대상 계정에 역할을 수임하여 작업을 수행 AssumeRoleWithSAML - SAML으로 로그인한 사용자의 자격증명을 반환 AssumeRoleWithWebIdentity - IdP(Identity Provider - Facebook Login, Google Login, OIDC Compatible&hellip;) 로그인 사용자의 자격증명을 반환 - 이것보다는 AWS Cognito 추천함 GetSessionToken - AWS 루트 계정 또는 사용자에 대한 MFA 인증 STS를 통해 역할을 수임받기 IAM 계정 내 혹은 계정 간 IAM 역할(Role)을 정의한다.]]></description>
</item>
</channel>
</rss>
