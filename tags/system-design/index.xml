<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>System Design - Tag - Riley&#39;s DevLog</title>
        <link>https://riley817.github.io/tags/system-design/</link>
        <description>System Design - Tag - Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Wed, 30 Aug 2023 09:49:24 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/tags/system-design/" rel="self" type="application/rss+xml" /><item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [12장] 채팅 시스템 설계</title>
    <link>https://riley817.github.io/chapter12/</link>
    <pubDate>Wed, 30 Aug 2023 09:49:24 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter12/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 느낀점 기존에는 폴링, 푸시 기법만 알고 있었지만 롱폴링이라는 방법도 알게 되었다. 웹소켓 서버는 웹서버나 로드밸런서처럼 앞단에 아무것도 붙이지 않는 건가 주로 작은 규모의 그룹 채팅에 대한 설계가 나와있었다. 규모가 큰 경우 어떻게 구성될까? 찾아보자 용량이 큰 파일 전송 기능을 추가할 경우 WebRTC 같은 기술을 통해 처리해도 좋지 않을까? 요약 &ndash;
1. 문제 이해 및 설계 범위 확정 요구사항 응답지연이 낮은 일대일 채팅 기능 최대 100명까지 참여할 수 있는 그룹 채팅 기능 사용자의 접속상태 표시 기능 다양한 단물 지원.]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [11장] 뉴스 피드 시스템 설계</title>
    <link>https://riley817.github.io/chapter11/</link>
    <pubDate>Sat, 26 Aug 2023 00:33:20 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter11/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 이번 챕터도 굉장히 우리 서비스와 밀접한 내용이여서 매우 유익하고 좋았습니다. 대부분 설계에서 캐시를 많이 사용하고 있는 것 같습니다. 우리 서비스의 콘텐츠 쪽에는 도입하고 있는데 유저 쪽에도 도입을 해서 불필요한 서비스 의존관계를 없애면 좋을 것 같습니다. 요약 &ndash;
뉴스피드 (news feed) 뉴스 피드는 사용자의 홈 페이지 중앙에 지속적으로 업데이트 되는 스토리들로 사용자 상태 정보 업데이트, 사진, 비디오, 링크, 앱 활동과 팔로우, 페이지, 그룹으로부터 오는 좋아요 등을 포함]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [10장] 알림 시스템 설계</title>
    <link>https://riley817.github.io/chapter10/</link>
    <pubDate>Fri, 25 Aug 2023 23:58:20 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter10/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 우리 업무와 매우 밀접한 내용이라 매우 유용했습니다. 우리서비스에서도 알림을 발송할 때 단말 토큰을 가져오기 위해 서버에서 다른 서버로 통신하는데 그부분을 캐시로 대체하여 리소스를 줄이면 좋을 것 같다는 생각이 들었습니다. 발송에 실패했을 때 재시도 할 수 있는 재시도 큐를 추가해야 겠습니다. 요약 &ndash; 알림 시스템은 모바일 푸시 알림 뿐만 아니라 SMS 메세지, 이메일 세 가지로 분류 할 수 있다.]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [9장] 웹 크롤러 설계</title>
    <link>https://riley817.github.io/chapter9/</link>
    <pubDate>Fri, 25 Aug 2023 22:46:01 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter9/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 예의있는 크롤러, 스파이더, 스파이더 덫 등 용어들이 재밌는 것 같습니다. 최근에는 리액트, 뷰와 같은 CSR(Client Side Rendering) 웹 페이지들이 많을 것 같은데 그런것들은 클라이언트에서 동적으로 렌더링을 완료한 뒤 웹 페이지를 다운받는 형태일까요? 그럼 고전적인 방식의 HTML 처리할 때보다 훨씬 오래 걸릴 것 같습니다. 크롤러는 조금 어려울 것 같지만 책에 설계된 구조대로 한번 실습을 해봐야겠습니다! 요약 웹 크롤러 web crawler 웹 크롤러는 로봇(robot) 또는 스파이더(spider)라고도 부른다.]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [8장] URL 단축기 설계</title>
    <link>https://riley817.github.io/chapter8/</link>
    <pubDate>Wed, 23 Aug 2023 22:22:24 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter8/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 내용이 매우 유익했습니다. 책에 설계된 대로 구현을 해볼 생각입니다! 단축 URL을 만들기 위한 접근법 (해시 후 충돌 해소, base-62) 이 외에 다른 접근법이 있을까 서칭과 chatGPT 쿤에게 문의 해보았지만 좋은 방법은 찾지 못하였는데 혹시 다른 아이디어가 있을까요? 요약 1. 문제 이해 및 설계 범위 확정 1.1 기능 URL 단축 : 주어진 긴 URL을 짧게 줄인다. URL 리다이렉션 : 축약된 URL로 HTTP 요청이 오면 원래 URL로 안내 높은 가용성 규모 확장성, 그리고 장애 감내가 요구 1.]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [7장] 분산 시스템을 위한 유일 ID 생성기 설계</title>
    <link>https://riley817.github.io/chapter7/</link>
    <pubDate>Sat, 19 Aug 2023 10:54:03 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter7/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 다중 마스터 복제에서 언젠가는 값이 중복되지 않을까 하는데 어떻게 생각하시나요? 트위터 스노플레이크는 서버 갯수가 동적으로 줄었다가 늘었다가 하면 적용이 불가능한 걸까요? UUID는 신기하당 요약 1. 문제 이해 및 설계 범위 확정 ID는 유일 해야 한다. ID는 숫자로만 구성되어야 한다. ID는 64비트로 표현 ID는 발급 날짜에 따라 정렬 가능해야 한다. 초당 10,000 개의 ID를 만들 수 있어야 한다. 2.]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [6장] 키-값 저장소 설계</title>
    <link>https://riley817.github.io/chapter6/</link>
    <pubDate>Sat, 19 Aug 2023 02:03:19 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter6/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 분산 시스템에서 어떤 노드가 최신의 데이터를 갖고 있는지 어떻게 판단할지 요약 키 값 저장소 키-값 데이터베이스라고도 하며 비 관계형 데이터베이스이다. 고유 식별자identifier를 키로 설정하며 키는 유일해야하고 키에 매달린 값은 키를 통해서만 접근 가능하다. 키는 짧을 수록 좋다. 값은 문자열, 리스트, 객체 등 어떤 값이 오든 상관없다. 아마존 다이나모, memcached, 레디스 등 1. 문제 이해 및 설계 범위 확정 읽기, 쓰기 그리고 메모리 사용량 사이 균형을 찾고 데이터 일관성과 가용성 사이에 타협점을 찾는 설계를 한다]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [5장] 안정 해시 설계</title>
    <link>https://riley817.github.io/chapter5/</link>
    <pubDate>Sat, 19 Aug 2023 01:18:15 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter5/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 챕터가 점점 어려워 집니다. 해시 키가 저장되는 서버를 탐색할 때 왜 시계방향으로 탐색을 했을지 문득 궁금해지네요? 성능과 메모리 두 개의 밸런스를 타협하는 결정은 어려워 보입니다. 이번 챕터의 내용을 떠나서 웹 서비스에 대한 튜닝 노하우 같은 게 있으신가요? (요청 제한 등등 인프라적으로 모든 것들) 서비스의 메모리 설정 등등 어떠한 근거를 통해 설정하고 어떤 데이터를 참고하는지요? (예를 들어 부하 테스트를 통해 예측 한다 등) 핫스팟 키 문제를 어떻게 해결하는지 자세한 설명이 있었으면 좋았었을 것 같습니다&hellip; 특정 유명인의 데이터를 예로 들었는데 만약 인덱스 키가 아닌 데이터 때문에 접근 빈도수가 높아지면 키를 재 배치 할 수 있을지?]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [4장] 처리율 제한 장치의 설계</title>
    <link>https://riley817.github.io/chapter4/</link>
    <pubDate>Wed, 16 Aug 2023 22:25:30 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter4/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의 하고 싶은 주제 우리 서비스 경우도 사용자 인증을 위해 여러 MSA 서버에서 하나의 인증 서비스를 의존하고 있습니다. 미들웨어를 도입하면 좋을 것 같아요. 이전에 API 게이트 서비스를 개발해두었던 것 같은데 &hellip;
우리 서비스에는 어떠한 처리율 제한 장치가 있을까요? (인프라 적으로 모든) 깊게 물어본적이 없는 것 같아 반성해 봅니다&hellip;
토큰 버킷 알고리즘에서 IP 주소별로 처리율 제한이 필요하면 IP 주소마다 버킷을 하나씩 할당하게 되면 버킷이 엄청 많아질텐데&hellip;]]></description>
</item>
<item>
    <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초 Study [3장] 시스템 설계 면접 공략법</title>
    <link>https://riley817.github.io/chapter3/</link>
    <pubDate>Sat, 12 Aug 2023 14:32:30 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/chapter3/</guid>
    <description><![CDATA[Note 팀 내에서 진행하는 Study 정리 입니다. 함께 논의하고 싶은 주제 면접관이 되었을 때 주로 어떤 질문들을 하시나요? 혹은 받아본 질문 중 기억에 남는 질문 면접자가 되었을 때 어떤 질문을 해야 어필을 할 수 있나요? 요약 해당 장은 면접 뿐만아니라 평소 시스템 설계를 할 때 중요한 사항들인 것 같다.
문제 이해 및 설계 범위 확정 요구사항을 완전히 이해하지 않고 답을 내놓는 행위는 좋지 않다. -&gt; 깊이 생각하고 요구사항과 가정을 분명히 하자 요구사항에 대한 질문 예시 구체적으로 어떤 기능들을 만들어야 하나?]]></description>
</item>
</channel>
</rss>
