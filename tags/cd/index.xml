<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>cd - Tag - Riley&#39;s DevLog</title>
        <link>https://riley817.github.io/tags/cd/</link>
        <description>cd - Tag - Riley&#39;s DevLog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>riley0422@icloud.com (Riley)</managingEditor>
            <webMaster>riley0422@icloud.com (Riley)</webMaster><lastBuildDate>Mon, 14 Feb 2022 14:55:56 &#43;0900</lastBuildDate><atom:link href="https://riley817.github.io/tags/cd/" rel="self" type="application/rss+xml" /><item>
    <title>CI/CD 서버 구축하기 - 2. docker-compose를 사용하여 Jenkins, GitLab 설치</title>
    <link>https://riley817.github.io/archives/devops/ci-cd/install-jenkins-gitlab/</link>
    <pubDate>Mon, 14 Feb 2022 14:55:56 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/archives/devops/ci-cd/install-jenkins-gitlab/</guid>
    <description><![CDATA[개요 사내 개발 협업을 위한 CI/CD 서버를 구축한다. AWS EC2 인스턴스를 사용중이다. (Ubuntu LTS) docker, docker-compose가 설치되어 있다. Install Docker Engine on Ubuntu Install Docker Compose GitLab의 경우 추후 라이센스 구매를 위해 ce가 아닌 ee 버전으로 설치한다. 설치를 위한 Docker Compose 설정 아래는 GitLab, Jenkins를 컨테이너를 띄우기 위한 docker-compose 설정이다. GitLab 이미지는 단일 컨테이너에서 서비스를 실행하기위한 Monolithic 이미지이며 최소 시스템 요구사항은 아래와 같다.
GitLab installation minimum requirements docker-compose.yml 파일 준비 작업 디렉터리를 생성한다.]]></description>
</item>
<item>
    <title>CI/CD 서버 구축하기 - 1. 개념</title>
    <link>https://riley817.github.io/archives/devops/ci-cd/ci-cd/</link>
    <pubDate>Thu, 10 Feb 2022 23:08:56 &#43;0900</pubDate>
    <author>riley</author>
    <guid>https://riley817.github.io/archives/devops/ci-cd/ci-cd/</guid>
    <description><![CDATA[요약 CI/CD는 애플리케이션 개발 단계를 자동화하여 애플리케이션을 보다 짧은 주기로 고객에게 제공하는 방법이다. 아래 세 가지 단계로 구분 할 수 있다.
지속적인 통합 Continuous Integration 지속적인 서비스 제공 Continuous Delivery 지속적인 배포 Continuous Deployment [출처] https://www.redhat.com/ko/topics/devops/what-is-ci-cd
💡 &ldquo;CD&quot;는 지속적인 서비스 제공(Continuous Delivery) 및/또는 지속적인 배포(Continuous Deployment)를 의미하며 이 두 용어는 상호 교환적으로 사용할 수 있다.
개념 CI 다수의 개발자가 작성 및 수정한 코드가 지속적으로 통합/테스트(Continuous Integration) 되는 것을 의미한다. CI 작업 순서는 도구, 프로그래밍 언어, 프로젝트 등 기타 여러 요인에 따라 많이 다르지만 일반적으로는 다음과 같다.]]></description>
</item>
</channel>
</rss>
